#! /usr/bin/env dash

parse_options ()
{
  # case:
  #   * --no-cache
  #   * --file
  #   * --help
  #   * --verbose
  #   * --tree-deps
}

compute_checksum ()
{
  # compute checksum for:
  #    * anchors files
  #    * datasources files
  #    * recursive included files:
  #      - check circular dependencies between includes
}

main ()
{
  set -eux

  # catch environment vars:
  #   * DOCKER_HOST: where curl will send its requests
  #   * NAVY_CACHE_PATH: where the script will store its cache

  parse_options "${@}"

  # define default values for environment variables & options

  compute_checksum

  # if checksum not found in the cache:
  #   - define $CONTEXTVERSION & $CONTEXTINFO datasources
  #   - gomplate to resolve GO templates with datasources:
  #       Use this CLI to expand templates into values but not in keys (improve
  #       it to works (recursively) with dictionnaries):
  #       $ yq '. | to_entries[] | "{{ print \"" + .key + "\" }}:" + .value' bases.yaml | gomplate -d bases.yaml=bases.yaml
  #   - resolve 'anchors' keywords
  #       - explode anchors and aliases
  #   - resolve 'includes' keywords
  #   - change loop run and run[].loop into dictionnaries to:
  #     - resolve 'extends' (replace them with anchors and aliases then use yq explode)
  #   - yq script to generate sh script.
  #   - generate cache: sha256sum <(find . -type -f -exec sha256sum {} \; | sort  | cut -d' ' -f1)
  # fi
  # depending of parsed options:
  # - run sh script with: seq 1 10 | xargs --max-args 1 --max-procs "$(( $(nproc) + 1 ))" ./script
  # - or use git to see dependencies as a tree
}

main "${@}"
