---

run:
  - endpoint: /containers/create
    method: POST
    loop:
      - id: containers.create.virtual.base
        virtual: true
        query:
          HostConfig:
            Privileged: false
          Labels:
            navy: true
      - id: containers.create.virtual.docker
        virtual: true
        query:
          Image: '{{ docker.image.layer }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          NetworkingConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}': {}
              '{{ $networks.proxified_docker_socket.name }}': {}
        depends_on:
          - images.build.docker
          - 'networks.create.{{ $networks.docker_utils.name }}'
          - 'networks.create.{{ $networks.proxified_docker_socket.name }}'
        extends:
          - containers.create.virtual.base
      - id: containers.create.virtual.isolated
        virtual: true
        query:
          HostConfig:
            NetworkMode: none
        extends:
          - containers.create.virtual.base
      - id: containers.create.virtual.gpu
        virtual: true
        query:
          Image: '{{ $gpu.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          Devices:
            - PathOnHost: '{{ $gpu.path.dev.gpu }}'
              PathInContainer: '{{ $gpu.path.dev.gpu }}'
              CgroupPermissions: rwm
            - PathOnHost: '{{ $gpu.path.dev.vga }}'
              PathInContainer: '{{ $gpu.path.dev.vga }}'
              CgroupPermissions: rwm
          GroupAdd:
            - render
            - video
        depends_on:
          - images.build.gpu
        extends:
          - containers.create.virtual.base
      - id: containers.create.virtual.man
        virtual: true
        query:
          Image: '{{ $man.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.build.man
        extends:
          - containers.create.virtual.sshd
      - id: containers.create.virtual.pass
        virtual: true
        query:
          Image: '{{ $pass.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.build.pass
        extends:
          - containers.create.virtual.sshd
      - id: containers.create.virtual.registry
        virtual: true
        query:
          Image: '{{ $registry.image.local }}{{ $all.sep.tag }}{{ $registry.tag }}'
          Env:
            - REGISTRY_LOG_ACCESSLOG_DISABLED=false
            - REGISTRY_LOG_FORMATTER=text
            - REGISTRY_LOG_LEVEL=info
            - 'REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY={{ $all.path.opt.data }}'
          HostConfig:
            Mounts:
              - <<: *volume
                source: ${REGISTRY_VOLUME}
                target: '{{ $all.path.opt.data }}'
            ReadonlyRootfs: true
          NetworkingConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}': {}
        depends_on:
          - images.build.registry
          - 'networks.create.{{ $networks.docker_utils.name }}'
          - volumes.create.${REGISTRY_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.virtual.sshd
        virtual: true
        query:
          Image: '{{ $sshd.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          ExposedPorts:
            - '{{ $sshd.port }}/tcp'
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${SSH_VOLUME}
                Target: '{{ $all.path.root.ssh }}'
              - <<: *readonly-volume
                Source: ${THEME_VOLUME}
                Target: '{{ $bash.path.theme }}'
          NetworkingConfig:
            EndpointsConfig:
              '{{ $networks.jump_area.name }}': {}
        depends_on:
          - images.build.sshd
          - 'networks.create.{{ $networks.jump_area.name }}'
          - volume.create.${SSH_VOLUME}
          - volume.create.${THEME_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.virtual.shell
        virtual: true
        query:
          Image: '{{ $shell.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.build.shell
        extends:
          - containers.create.virtual.sshd
      - id: containers.create.virtual.vim
        virtual: true
        query:
          Image: '{{ $vim.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.build.vim
        extends:
          - containers.create.virtual.sshd
      - id: containers.create.virtual.zig
        virtual: true
        query:
          Image: '{{ $zig.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.build.zig
        extends:
          - containers.create.virtual.sshd

...
