---

include:
  - containers/create/virtual.yaml

run:
  - endpoint: /containers/create
    method: POST
    loop:
      - id: '{{ $dependencies.containers.create.builder }}'
        query:
          name: '{{ $builder.host }}'
          Hostname: '{{ $builder.host }}'
          Image: '{{ $builder.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          Cmd:
            - --addr
            - 'tcp://0.0.0.0:{{ $builder.port }}'
            - --config
            - '{{ $buildkit.path.conf }}'
            - --oci-worker-no-process-sandbox
          ExposedPorts:
            - '{{ $builder.port }}/tcp'
          HostConfig:
            SecurityOpt:
              - apparmor:unconfined
              - seccomp:unconfined
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}':
                IPv4Address: '{{ $builder.ip }}'
        depends_on:
          - '{{ $dependencies.images.build.builder }}'
          - '{{ $dependencies.networks.create.docker_utils }}'
        extends:
          - '{{ $dependencies.containers.create.virtual._ }}'
      - id: '{{ $dependencies.containers.create.carpenter.relay }}'
          name: '{{ $carpenterrelay.host }}'
          Hostname: '{{ $carpenterrelay.host }}'
          Image: '{{ $carpenterrelay.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $carpenterrelay.volume }}'
                Target: '{{ $xserver.path.sockets }}'
              - <<: *volume
                Source: '{{ $relay.volume.var.log }}'
                Target: '{{ $all.path.var.log }}'
            ReadonlyRootfs: true
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_xserver_socket.name }}':
                IPv4Address: '{{ $carpenterrelay.ip }}'
        depends_on:
          - '{{ $dependencies.images.build.carpenter.relay }}'
          - '{{ $dependencies.networks.create.proxified_xserver_socket }}'
          - '{{ $dependencies.volumes.create.carpenterrelay }}'
          - '{{ $dependencies.volumes.create.relay.var.log }}'
        extends:
          - '{{ $dependencies.containers.create.virtual._ }}'
      - id: '{{ $dependencies.containers.create.carpenter.runner }}'
          name: '{{ $carpenterrunner.host }}'
          Hostname: '{{ $carpenterrunner.host }}'
          Image: '{{ $carpenterrunner.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: '{{ $carpenterrelay.volume }}'
                Target: '{{ $xserver.path.sockets }}'
        depends_on:
          - '{{ $dependencies.images.build.carpenter.runner }}'
          - '{{ $dependencies.volumes.create.carpenterrelay }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.isolated }}'
      - id: '{{ $dependencies.containers.create.controller }}'
          name: '{{ $controller.host }}'
          Hostname: '{{ $controller.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $project.volume }}'
                Target: '{{ $workspaces.path.project }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}':
                IPv4Address: '{{ $controller.ip.docker_utils }}'
              '{{ $networks.proxified_docker_socket.name }}':
                IPv4Address: '{{ $controller.ip.proxified_docker_socket }}'
        depends_on:
          - '{{ $dependencies.volumes.create.project }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.docker }}'
      - id: '{{ $dependencies.containers.create.editor }}'
          name: '{{ $editor.host }}'
          Hostname: '{{ $editor.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $project.volume }}'
                Target: '{{ $workspaces.path.project }}'
              - <<: *volume
                Source: '{{ $spaceporn.volume }}'
                Target: '{{ $workspaces.path.spaceporn }}'
        depends_on:
          - '{{ $dependencies.volumes.create.project }}'
          - '{{ $dependencies.volumes.create.spaceporn }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.vim }}'
      - id: '{{ $dependencies.containers.create.explorer.shell }}'
          name: '{{ $explorershell.host }}'
          Hostname: '{{ $explorershell.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $project.volume }}'
                Target: '{{ $workspaces.path.project }}'
        depends_on:
          - '{{ $dependencies.volumes.create.project }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.shell }}'
      - id: '{{ $dependencies.containers.create.explorer.zig }}'
          name: '{{ $explorerzig.host }}'
          Hostname: '{{ $explorerzig.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $spaceporn.volume }}'
                Target: '{{ $workspaces.path.spaceporn }}'
        depends_on:
          - '{{ $dependencies.volumes.create.spaceporn }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.zig }}'
      - id: '{{ $dependencies.containers.create.jumper }}'
          name: '{{ $jumper.host }}'
          Hostname: '{{ $jumper.host }}'
          Image: '{{ $jumper.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          Tty: true
          AttachStdout: true
          AttachStderr: true
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.jump_area.name }}': {}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: '{{ $listener.volume.opt.data }}'
                Target: '{{ $jumper.path.listener.opt.data }}'
              - <<: *readonly-volume
                Source: '{{ $listener.volume.opt.scripts }}'
                Target: '{{ $jumper.path.listener.opt.scripts }}'
              - <<: *readonly-volume
                Source: '{{ $listener.volume.var.log }}'
                Target: '{{ $jumper.path.listener.var.log }}'
              - <<: *readonly-volume
                Source: '{{ $socketproxy.volume.etc.nginx }}'
                Target: '{{ $jumper.path.proxy.etc }}'
              - <<: *readonly-volume
                Source: '{{ $socketproxy.volume.opt.scripts }}'
                Target: '{{ $jumper.path.proxy.opt.scripts }}'
              - <<: *readonly-volume
                Source: '{{ $socketproxy.volume.var.log.nginx }}'
                Target: '{{ $jumper.path.proxy.var.log }}'
              - <<: *readonly-volume
                Source: '{{ $relay.volume.var.log }}'
                Target: '{{ $jumper.path.relay.var.log }}'
              - <<: *readonly-volume
                Source: '{{ $sshd.volume }}'
                Target: '{{ $all.path.opt.ssh }}'
              - <<: *volume
                Source: '{{ $bash.volume.theme }}'
                Target: '{{ $bash.path.theme }}'
              - <<: *readonly-volume
                Source: '{{ $xserver.volume.etc.nginx }}'
                Target: '{{ $jumper.path.xserver.etc }}'
              - <<: *readonly-volume
                Source: '{{ $xserver.volume.opt.scripts }}'
                Target: '{{ $jumper.path.xserver.opt.scripts }}'
              - <<: *readonly-volume
                Source: '{{ $xserver.volume.var.log.nginx }}'
                Target: '{{ $jumper.path.xserver.var.log }}'
        depends_on:
          - '{{ $dependencies.images.build.jumper }}'
          - '{{ $dependencies.networks.create.jump_area }}'
          - '{{ $dependencies.volumes.create.listener.opt.data }}'
          - '{{ $dependencies.volumes.create.listener.opt.scripts }}'
          - '{{ $dependencies.volumes.create.listener.var.log }}'
          - '{{ $dependencies.volumes.create.socketproxy.etc.nginx }}'
          - '{{ $dependencies.volumes.create.socketproxy.opt.scripts }}'
          - '{{ $dependencies.volumes.create.socketproxy.var.log.nginx }}'
          - '{{ $dependencies.volumes.create.relay.var.log }}'
          - '{{ $dependencies.volumes.create.sshd }}'
          - '{{ $dependencies.volumes.create.xserver.etc.nginx }}'
          - '{{ $dependencies.volumes.create.xserver.opt.scripts }}'
          - '{{ $dependencies.volumes.create.xserver.var.log.nginx }}'
        extends:
          - '{{ $dependencies.containers.create.virtual._ }}'
      - id: '{{ $dependencies.containers.create.listener }}'
          name: '{{ $listener.host }}'
          Hostname: '{{ $listener.host }}'
          Image: '{{ $listener.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_docker_socket.name }}':
                IPv4Address: '{{ $listener.ip }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $listener.volume.opt.data }}'
                Target: '{{ $all.path.opt.data }}'
              - <<: *readonly-volume
                Source: '{{ $listener.volume.opt.scripts }}'
                Target: '{{ $all.path.opt.scripts }}'
              - <<: *volume
                Source: '{{ $listener.volume.var.log }}'
                Target: '{{ $all.path.var.log }}'
            ReadonlyRootfs: true
        depends_on:
          - '{{ $dependencies.images.build.listener }}'
          - '{{ $dependencies.networks.create.proxified_docker_socket }}'
          - '{{ $dependencies.volumes.create.listener.opt.data }}'
          - '{{ $dependencies.volumes.create.listener.opt.scripts }}'
          - '{{ $dependencies.volumes.create.listener.var.log }}'
        extends:
          - '{{ $dependencies.containers.create.virtual._ }}'
      - id: '{{ $dependencies.containers.create.socketproxy }}'
          name: '{{ $socketproxy.host }}'
          Hostname: '{{ $socketproxy.host }}'
          Image: '{{ $socketproxy.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          ExposedPorts:
            - '{{ $socketproxy.port }}/tcp'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_docker_socket.name }}':
                IPv4Address: '{{ $socketproxy.ip }}'
          HostConfig:
            Mounts:
              - <<: *readonly-bind
                Source: '{{ $docker.path.socket }}'
                Target: '{{ $docker.path.socket }}'
              - <<: *readonly-volume
                Source: '{{ $socketproxy.volume.etc.nginx }}'
                Target: '{{ $nginx.path.etc }}'
              - <<: *readonly-volume
                Source: '{{ $socketproxy.volume.opt.scripts }}'
                Target: '{{ $nginx.path.opt.scripts }}'
              - <<: *volume
                Source: '{{ $socketproxy.volume.var.log.nginx }}'
                Target: '{{ $nginx.path.var.log }}'
            ReadonlyRootfs: true
            Tmpfs:
              /run: ""
              /tmp: ""
        depends_on:
          - '{{ $dependencies.images.build.socketproxy }}'
          - '{{ $dependencies.networks.create.proxified_docker_socket }}'
          - '{{ $dependencies.volumes.create.socketproxy.etc.nginx }}'
          - '{{ $dependencies.volumes.create.socketproxy.opt.scripts }}'
          - '{{ $dependencies.volumes.create.socketproxy.var.log.nginx }}'
        extends:
          - '{{ $dependencies.containers.create.virtual._ }}'
      - id: '{{ $dependencies.containers.create.registry }}'
          name: '{{ $registry.host }}'
          Hostname: '{{ $registry.host }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}':
                IPv4Address: '{{ $registry.ip }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.registry }}'
      - id: '{{ $dependencies.containers.create.safedeposit }}'
          name: '{{ $safedeposit.host }}'
          Hostname: '{{ $safedeposit.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: '{{ $safedeposit.volume }}'
                Target: '{{ $all.path.root.passwd }}'
        depends_on:
          - '{{ $dependencies.images.build.pass }}'
          - '{{ $dependencies.volumes.create.safedeposit }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.pass }}'
      - id: '{{ $dependencies.containers.create.scholar }}'
          name: '{{ $scholar.host }}'
          Hostname: '{{ $scholar.host }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.man }}'
      - id: '{{ $dependencies.containers.create.spaceporn.relay }}'
          name: '{{ $spacepornrelay.host }}'
          Hostname: '{{ $spacepornrelay.host }}'
          Image: '{{ $spacepornrelay.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          HostConfig:
            ReadonlyRootfs: true
            Mounts:
              - <<: *volume
                source: '{{ $spacepornrelay.volume }}'
                target: '{{ $xserver.path.sockets }}'
              - <<: *volume
                source: '{{ $relay.volume.var.log }}'
                target: '{{ $all.path.var.log }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_xserver_socket.name }}':
                IPv4Address: '{{ $spacepornrelay.ip }}'
        depends_on:
          - '{{ $dependencies.images.build.spaceporn.relay }}'
          - '{{ $dependencies.networks.create.proxified_xserver_socket }}'
          - '{{ $dependencies.volumes.create.spacepornrelay }}'
          - '{{ $dependencies.volumes.create.relay.var.log }}'
        extends:
          - '{{ $dependencies.containers.create.virtual._ }}'
      - id: '{{ $dependencies.containers.create.spaceporn.runner }}'
          name: '{{ $spacepornrunner.host }}'
          Hostname: '{{ $spacepornrunner.host }}'
          Entrypoint:
            - '{{ $workspaces.path.spaceporn }}/{{ $spaceporn.id }}/zig-out/bin/{{ $spaceporn.id }}'
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                source: '{{ $spacepornrelay.volume }}'
                target: '{{ $xserver.path.sockets }}'
              - <<: *readonly-volume
                source: '{{ $spaceporn.volume }}'
                target: '{{ $workspaces.path.spaceporn }}'
        depends_on:
          - '{{ $dependencies.volumes.create.spacepornrelay }}'
          - '{{ $dependencies.volumes.create.spaceporn }}'
        extends:
          - '{{ $dependencies.containers.create.virtual.gpu }}'
          - '{{ $dependencies.containers.create.virtual.isolated }}'
      - id: '{{ $dependencies.containers.create.xserver }}'
          name: '{{ $xserver.host }}'
          Hostname: '{{ $xserver.host }}'
          Image: '{{ xserver.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          ExposedPorts:
            - '{{ $xserver.port }}/tcp'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_xserver_socket.name }}':
                IPv4Address: '{{ $xserver.ip }}'
          HostConfig:
            ReadonlyRootfs: true
            SecurityOpt:
              - no-new-privileges:true
            Mounts:
              - <<: *readonly-bind
                source: '{{ $xserver.path.display }}'
                target: '{{ $xserver.path.display }}'
              - <<: *readonly-volume
                source: '{{ $xserver.volume.etc.nginx }}'
                target: '{{ $nginx.path.etc }}'
              - <<: *readonly-volume
                source: '{{ $xserver.volume.opt.scripts }}'
                target: '{{ $all.path.opt.scripts }}'
              - <<: *volume
                source: '{{ $xserver.volume.var.log.nginx }}'
                target: '{{ $all.path.var.log }}'
            Tmpfs:
              /run: ""
        depends_on:
          - '{{ $dependencies.images.build.xserver }}'
          - '{{ $dependencies.networks.create.proxified_xserver_socket }}'
          - '{{ $dependencies.volumes.create.xserver.etc.nginx }}'
          - '{{ $dependencies.volumes.create.xserver.opt.scripts }}'
          - '{{ $dependencies.volumes.create.xserver.var.log.nginx }}'

...
