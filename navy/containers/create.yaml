---

include:
  - containers/create/virtual.yaml

run:
  - endpoint: /containers/create
    method: POST
    loop:
      - id: containers.create.builder
        query:
          name: '{{ $builder.host }}'
          Hostname: '{{ $builder.host }}'
          Image: '{{ $builder.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          Cmd:
            - --addr
            - 'tcp://0.0.0.0:{{ $builder.port }}'
            - --config
            - '{{ $buildkit.path.conf }}'
            - --oci-worker-no-process-sandbox
          ExposedPorts:
            - '{{ $builder.port }}/tcp'
          HostConfig:
            SecurityOpt:
              - apparmor:unconfined
              - seccomp:unconfined
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}':
                IPv4Address: '{{ $builder.ip }}'
        depends_on:
          - images.build.builder
          - 'networks.create.{{ $networks.docker_utils.name }}'
        extends:
          - containers.create.virtual.base
      - id: containers.create.carpenter.relay
          name: '{{ $carpenterrelay.host }}'
          Hostname: '{{ $carpenterrelay.host }}'
          Image: '{{ $carpenterrelay.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
                Target: '{{ $xserver.path.sockets }}'
              - <<: *volume
                Source: ${RELAY_VAR_LOG_VOLUME}
                Target: '{{ $all.path.var.log }}'
            ReadonlyRootfs: true
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_xserver_socket.name }}':
                IPv4Address: '{{ $carpenterrelay.ip }}'
        depends_on:
          - images.build.carpenter.relay
          - 'networks.create.{{ $networks.proxified_xserver_socket.name }}'
          - volumes.create.${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.carpenter.runner
          name: '{{ $carpenterrunner.host }}'
          Hostname: '{{ $carpenterrunner.host }}'
          Image: '{{ $carpenterrunner.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
                Target: '{{ $xserver.path.sockets }}'
        depends_on:
          - images.build.carpenter.runner
          - volumes.create.${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
        extends:
          - containers.create.virtual.isolated
      - id: containers.create.controller
          name: '{{ $controller.host }}'
          Hostname: '{{ $controller.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: '{{ $workspaces.path.project }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}':
                IPv4Address: '{{ $controller.ip.docker_utils }}'
              '{{ $networks.proxified_docker_socket.name }}':
                IPv4Address: '{{ $controller.ip.proxified_docker_socket }}'
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
        extends:
          - containers.create.virtual.docker
      - id: containers.create.editor
          name: '{{ $editor.host }}'
          Hostname: '{{ $editor.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: '{{ $workspaces.path.project }}'
              - <<: *volume
                Source: ${SPACEPORN_VOLUME}
                Target: '{{ $workspaces.path.spaceporn }}'
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.vim
      - id: containers.create.explorer.shell
          name: '{{ $explorershell.host }}'
          Hostname: '{{ $explorershell.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: '{{ $workspaces.path.project }}'
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
        extends:
          - containers.create.virtual.shell
      - id: containers.create.explorer.zig
          name: '{{ $explorerzig.host }}'
          Hostname: '{{ $explorerzig.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${SPACEPORN_VOLUME}
                Target: '{{ $workspaces.path.spaceporn }}'
        depends_on:
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.zig
      - id: containers.create.jumper
          name: '{{ $jumper.host }}'
          Hostname: '{{ $jumper.host }}'
          Image: '{{ $jumper.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          Tty: true
          AttachStdout: true
          AttachStderr: true
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.jump_area.name }}': {}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_DATA_VOLUME}
                Target: '{{ $jumper.path.listener.opt.data }}'
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_SCRIPTS_VOLUME}
                Target: '{{ $jumper.path.listener.opt.scripts }}'
              - <<: *readonly-volume
                Source: ${LISTENER_VAR_LOG_VOLUME}
                Target: '{{ $jumper.path.listener.var.log }}'
              - <<: *readonly-volume
                Source: ${PROXY_ETC_NGINX_VOLUME}
                Target: '{{ $jumper.path.proxy.etc }}'
              - <<: *readonly-volume
                Source: ${PROXY_OPT_SCRIPTS_VOLUME}
                Target: '{{ $jumper.path.proxy.opt.scripts }}'
              - <<: *readonly-volume
                Source: ${PROXY_VAR_LOG_NGINX_VOLUME}
                Target: '{{ $jumper.path.proxy.var.log }}'
              - <<: *readonly-volume
                Source: ${RELAY_VAR_LOG_VOLUME}
                Target: '{{ $jumper.path.relay.var.log }}'
              - <<: *readonly-volume
                Source: ${SSH_VOLUME}
                Target: '{{ $all.path.opt.ssh }}'
              - <<: *volume
                Source: ${THEME_VOLUME}
                Target: '{{ $bash.path.theme }}'
              - <<: *readonly-volume
                Source: ${XSERVER_ETC_NGINX_VOLUME}
                Target: '{{ $jumper.path.xserver.etc }}'
              - <<: *readonly-volume
                Source: ${XSERVER_OPT_SCRIPTS_VOLUME}
                Target: '{{ $jumper.path.xserver.opt.scripts }}'
              - <<: *readonly-volume
                Source: ${XSERVER_VAR_LOG_NGINX_VOLUME}
                Target: '{{ $jumper.path.xserver.var.log }}'
        depends_on:
          - images.build.jumper
          - 'networks.create.{{ $networks.jump_area.name }}'
          - volumes.create.${LISTENER_OPT_DATA_VOLUME}
          - volumes.create.${LISTENER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${LISTENER_VAR_LOG_VOLUME}
          - volumes.create.${PROXY_ETC_NGINX_VOLUME}
          - volumes.create.${PROXY_OPT_SCRIPTS_VOLUME}
          - volumes.create.${PROXY_VAR_LOG_NGINX_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
          - volumes.create.${SSH_VOLUME}
          - volumes.create.${XSERVER_ETC_NGINX_VOLUME}
          - volumes.create.${XSERVER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${XSERVER_VAR_LOG_NGINX_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.listener
          name: '{{ $listener.host }}'
          Hostname: '{{ $listener.host }}'
          Image: '{{ $listener.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_docker_socket.name }}':
                IPv4Address: '{{ $listener.ip }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${LISTENER_OPT_DATA_VOLUME}
                Target: '{{ $all.path.opt.data }}'
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_SCRIPTS_VOLUME}
                Target: '{{ $all.path.opt.scripts }}'
              - <<: *volume
                Source: ${LISTENER_VAR_LOG_VOLUME}
                Target: '{{ $all.path.var.log }}'
            ReadonlyRootfs: true
        depends_on:
          - images.build.jumper
          - 'networks.create.{{ $networks.proxified_docker_socket.name }}'
          - volumes.create.${LISTENER_OPT_DATA_VOLUME}
          - volumes.create.${LISTENER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${LISTENER_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.proxy
          name: '{{ $socketproxy.host }}'
          Hostname: '{{ $socketproxy.host }}'
          Image: '{{ $socketproxy.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          ExposedPorts:
            - '{{ $socketproxy.port }}/tcp'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_docker_socket.name }}':
                IPv4Address: '{{ $socketproxy.ip }}'
          HostConfig:
            Mounts:
              - <<: *readonly-bind
                Source: '{{ $docker.path.socket }}'
                Target: '{{ $docker.path.socket }}'
              - <<: *readonly-volume
                Source: ${PROXY_ETC_NGINX_VOLUME}
                Target: '{{ $nginx.path.etc }}'
              - <<: *readonly-volume
                Source: ${PROXY_OPT_SCRIPTS_VOLUME}
                Target: '{{ $nginx.path.opt.scripts }}'
              - <<: *volume
                Source: ${PROXY_VAR_LOG_NGINX_VOLUME}
                Target: '{{ $nginx.path.var.log }}'
            ReadonlyRootfs: true
            Tmpfs:
              /run: ""
              /tmp: ""
        depends_on:
          - images.build.proxy
          - 'networks.create.{{ $networks.proxified_docker_socket.name }}'
          - volumes.create.${PROXY_ETC_NGINX_VOLUME}
          - volumes.create.${PROXY_OPT_SCRIPTS_VOLUME}
          - volumes.create.${PROXY_VAR_LOG_NGINX_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.registry
          name: '{{ $registry.host }}'
          Hostname: '{{ $registry.host }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.docker_utils.name }}':
                IPv4Address: '{{ $registry.ip }}'
        extends:
          - containers.create.virtual.registry
      - id: containers.create.safedeposit
          name: '{{ $safedeposit.host }}'
          Hostname: '{{ $safedeposit.host }}'
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${SAFEDEPOSIT_VOLUME}
                Target: '{{ $all.path.root.passwd }}'
        depends_on:
          - images.build.pass
          - volumes.create.${SAFEDEPOSIT_VOLUME}
        extends:
          - containers.create.virtual.pass
      - id: containers.create.scholar
          name: '{{ $scholar.host }}'
          Hostname: '{{ $scholar.host }}'
        extends:
          - containers.create.virtual.man
      - id: containers.create.spaceporn.relay
          name: '{{ $spacepornrelay.host }}'
          Hostname: '{{ $spacepornrelay.host }}'
          Image: '{{ $spacepornrelay.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          HostConfig:
            ReadonlyRootfs: true
            Mounts:
              - <<: *volume
                source: ${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
                target: '{{ $xserver.path.sockets }}'
              - <<: *volume
                source: ${RELAY_VAR_LOG_VOLUME}
                target: '{{ $all.path.var.log }}'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_xserver_socket.name }}':
                IPv4Address: '{{ $spacepornrelay.ip }}'
        depends_on:
          - images.build.spaceporn.relay
          - 'networks.create.{{ $networks.proxified_xserver_socket.name }}'
          - volumes.create.${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.spaceporn.runner
          name: '{{ $spacepornrunner.host }}'
          Hostname: '{{ $spacepornrunner.host }}'
          Entrypoint:
            - '{{ $workspaces.path.spaceporn }}'/${SPACEPORN_ID}/zig-out/bin/${SPACEPORN_ID}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                source: ${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
                target: '{{ $xserver.path.sockets }}'
              - <<: *readonly-volume
                source: ${SPACEPORN_VOLUME}
                target: '{{ $workspaces.path.spaceporn }}'
        depends_on:
          - volumes.create.${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.gpu
          - containers.create.virtual.isolated
      - id: containers.create.xserver
          name: '{{ $xserver.host }}'
          Hostname: '{{ $xserver.host }}'
          Image: '{{ xserver.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          ExposedPorts:
            - '{{ $xserver.port }}/tcp'
          NetworkConfig:
            EndpointsConfig:
              '{{ $networks.proxified_xserver_socket.name }}':
                IPv4Address: '{{ $xserver.ip }}'
          HostConfig:
            ReadonlyRootfs: true
            SecurityOpt:
              - no-new-privileges:true
            Mounts:
              - <<: *readonly-bind
                source: '{{ $xserver.path.display }}'
                target: '{{ $xserver.path.display }}'
              - <<: *readonly-volume
                source: ${XSERVER_ETC_NGINX_VOLUME}
                target: '{{ $nginx.path.etc }}'
              - <<: *readonly-volume
                source: ${XSERVER_OPT_SCRIPTS_VOLUME}
                target: '{{ $all.path.opt.scripts }}'
              - <<: *volume
                source: ${XSERVER_VAR_LOG_NGINX_VOLUME}
                target: '{{ $all.path.var.log }}'
            Tmpfs:
              /run: ""
        depends_on:
          - images.build.xserver
          - 'networks.create.{{ $networks.proxified_xserver_socket.name }}'
          - volumes.create.${XSERVER_ETC_NGINX_VOLUME}
          - volumes.create.${XSERVER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${XSERVER_VAR_LOG_NGINX_VOLUME}

...
