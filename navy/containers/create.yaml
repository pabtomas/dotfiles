---

include:
  - containers/create/virtual.yaml

run:
  - endpoint: /containers/create
    method: POST
    loop:
      - id: containers.create.builder
        query:
          name: {{ (datasource "datasources/builder.yaml" ).host }}
          Hostname: {{ (datasource "datasources/builder.yaml" ).host }}
          Image: ${BUILDER_IMG}
          Cmd:
            - --addr
            - tcp://0.0.0.0:${BUILDER_PORT}
            - --config
            - ${_BUILDKIT_CONF_PATH}
            - --oci-worker-no-process-sandbox
          ExposedPorts:
            - ${BUILDER_PORT}/tcp
          HostConfig:
            SecurityOpt:
              - apparmor:unconfined
              - seccomp:unconfined
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").docker_utils_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").builder_ip }}
        depends_on:
          - images.build.builder
          - networks.create.{{ (datasource "datasources/networks.yaml").docker_utils_network }}
        extends:
          - containers.create.virtual.base
      - id: containers.create.carpenter.relay
          name: {{ (datasource "datasources/carpenter/relay.yaml" ).host }}
          Hostname: {{ (datasource "datasources/carpenter/relay.yaml" ).host }}
          Image: ${CARPENTER_RELAY_IMG}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
                Target: ${TMP_XSERVER_SOCKETS_PATH}
              - <<: *volume
                Source: ${RELAY_VAR_LOG_VOLUME}
                Target: ${VAR_LOG_PATH}
            ReadonlyRootfs: true
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").proxified_xserver_socket_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").carpenter_relay_ip }}
        depends_on:
          - images.build.carpenter.relay
          - networks.create.{{ (datasource "datasources/networks.yaml").proxified_xserver_socket_network }}
          - volumes.create.${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.carpenter.runner
          name: {{ (datasource "datasources/carpenter/runner.yaml" ).host }}
          Hostname: {{ (datasource "datasources/carpenter/runner.yaml" ).host }}
          Image: ${CARPENTER_RUNNER_IMG}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
                Target: ${TMP_XSERVER_SOCKETS_PATH}
        depends_on:
          - images.build.carpenter.runner
          - volumes.create.${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
        extends:
          - containers.create.virtual.isolated
      - id: containers.create.controller
          name: {{ (datasource "datasources/controller.yaml" ).host }}
          Hostname: {{ (datasource "datasources/controller.yaml" ).host }}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: ${MYWHALEFLEET_PATH}
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").docker_utils_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").client_ip }}
              {{ (datasource "datasources/networks.yaml").proxified_docker_socket_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").controller_ip }}
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
        extends:
          - containers.create.virtual.docker
      - id: containers.create.editor
          name: {{ (datasource "datasources/editor.yaml" ).host }}
          Hostname: {{ (datasource "datasources/editor.yaml" ).host }}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: ${MYWHALEFLEET_PATH}
              - <<: *volume
                Source: ${SPACEPORN_VOLUME}
                Target: ${SPACEPORN_PATH}
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.vim
      - id: containers.create.explorer.shell
          name: {{ (datasource "datasources/explorers/shell.yaml" ).host }}
          Hostname: {{ (datasource "datasources/explorers/shell.yaml" ).host }}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: ${MYWHALEFLEET_PATH}
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
        extends:
          - containers.create.virtual.shell
      - id: containers.create.explorer.zig
          name: {{ (datasource "datasources/explorers/zig.yaml" ).host }}
          Hostname: {{ (datasource "datasources/explorers/zig.yaml" ).host }}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${SPACEPORN_VOLUME}
                Target: ${SPACEPORN_PATH}
        depends_on:
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.zig
      - id: containers.create.jumper
          name: {{ (datasource "datasources/jumper.yaml" ).host }}
          Hostname: {{ (datasource "datasources/jumper.yaml" ).host }}
          Image: ${JUMPER_IMG}
          Tty: true
          AttachStdout: true
          AttachStderr: true
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").jump_area_network }}: {}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_DATA_VOLUME}
                Target: /opt/${LISTENER_ID}${DATA_PATH}
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_SCRIPTS_VOLUME}
                Target: /opt/${LISTENER_ID}${OPT_SCRIPTS_PATH}
              - <<: *readonly-volume
                Source: ${LISTENER_VAR_LOG_VOLUME}
                Target: /opt/${LISTENER_ID}${VAR_LOG_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_ETC_NGINX_VOLUME}
                Target: /opt/${PROXY_ID}${ETC_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_OPT_SCRIPTS_VOLUME}
                Target: /opt/${PROXY_ID}${OPT_SCRIPTS_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_VAR_LOG_NGINX_VOLUME}
                Target: /opt/${PROXY_ID}${VAR_LOG_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${RELAY_VAR_LOG_VOLUME}
                Target: /opt/${RELAY_ID}${VAR_LOG_PATH}
              - <<: *readonly-volume
                Source: ${SSH_VOLUME}
                Target: ${OPT_SSH_PATH}
              - <<: *volume
                Source: ${THEME_VOLUME}
                Target: ${BASH_THEME_PATH}
              - <<: *readonly-volume
                Source: ${XSERVER_ETC_NGINX_VOLUME}
                Target: /opt/${XSERVER_ID}${ETC_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${XSERVER_OPT_SCRIPTS_VOLUME}
                Target: /opt/${XSERVER_ID}${OPT_SCRIPTS_PATH}
              - <<: *readonly-volume
                Source: ${XSERVER_VAR_LOG_NGINX_VOLUME}
                Target: /opt/${XSERVER_ID}${VAR_LOG_NGINX_PATH}
        depends_on:
          - images.build.jumper
          - networks.create.{{ (datasource "datasources/networks.yaml").jump_area_network }}
          - volumes.create.${LISTENER_OPT_DATA_VOLUME}
          - volumes.create.${LISTENER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${LISTENER_VAR_LOG_VOLUME}
          - volumes.create.${PROXY_ETC_NGINX_VOLUME}
          - volumes.create.${PROXY_OPT_SCRIPTS_VOLUME}
          - volumes.create.${PROXY_VAR_LOG_NGINX_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
          - volumes.create.${SSH_VOLUME}
          - volumes.create.${XSERVER_ETC_NGINX_VOLUME}
          - volumes.create.${XSERVER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${XSERVER_VAR_LOG_NGINX_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.listener
          name: {{ (datasource "datasources/listener.yaml" ).host }}
          Hostname: {{ (datasource "datasources/listener.yaml" ).host }}
          Image: ${LISTENER_IMG}
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").proxified_docker_socket_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").listener_ip }}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${LISTENER_OPT_DATA_VOLUME}
                Target: ${DATA_PATH}
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_SCRIPTS_VOLUME}
                Target: ${OPT_SCRIPTS_PATH}
              - <<: *volume
                Source: ${LISTENER_VAR_LOG_VOLUME}
                Target: ${VAR_LOG_PATH}
            ReadonlyRootfs: true
        depends_on:
          - images.build.jumper
          - networks.create.{{ (datasource "datasources/networks.yaml").proxified_docker_socket_network }}
          - volumes.create.${LISTENER_OPT_DATA_VOLUME}
          - volumes.create.${LISTENER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${LISTENER_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.proxy
          name: {{ (datasource "datasources/proxy.yaml" ).host }}
          Hostname: {{ (datasource "datasources/proxy.yaml" ).host }}
          Image: ${PROXY_IMG}
          ExposedPorts:
            - ${PROXY_PORT}/tcp
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").proxified_docker_socket_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").proxy_ip }}
          HostConfig:
            Mounts:
              - <<: *readonly-bind
                Source: ${_DOCKER_SOCKET_PATH}
                Target: ${_DOCKER_SOCKET_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_ETC_NGINX_VOLUME}
                Target: ${ETC_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_OPT_SCRIPTS_VOLUME}
                Target: ${OPT_SCRIPTS_PATH}
              - <<: *volume
                Source: ${PROXY_VAR_LOG_NGINX_VOLUME}
                Target: ${VAR_LOG_NGINX_PATH}
            ReadonlyRootfs: true
            Tmpfs:
              /run: ""
              /tmp: ""
        depends_on:
          - images.build.proxy
          - networks.create.{{ (datasource "datasources/networks.yaml").proxified_docker_socket_network }}
          - volumes.create.${PROXY_ETC_NGINX_VOLUME}
          - volumes.create.${PROXY_OPT_SCRIPTS_VOLUME}
          - volumes.create.${PROXY_VAR_LOG_NGINX_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.registry
          name: {{ (datasource "datasources/registry.yaml" ).host }}
          Hostname: {{ (datasource "datasources/registry.yaml" ).host }}
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").docker_utils_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").registry_ip }}
        extends:
          - containers.create.virtual.registry
      - id: containers.create.safedeposit
          name: {{ (datasource "datasources/safedeposit.yaml" ).host }}
          Hostname: {{ (datasource "datasources/safedeposit.yaml" ).host }}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${SAFEDEPOSIT_VOLUME}
                Target: ${SAFEDEPOSIT_PATH}
        depends_on:
          - images.build.pass
          - volumes.create.${SAFEDEPOSIT_VOLUME}
        extends:
          - containers.create.virtual.pass
      - id: containers.create.scholar
          name: {{ (datasource "datasources/scholar.yaml" ).host }}
          Hostname: {{ (datasource "datasources/scholar.yaml" ).host }}
        extends:
          - containers.create.virtual.man
      - id: containers.create.spaceporn.relay
          name: {{ (datasource "datasources/spaceporn/relay.yaml" ).host }}
          Hostname: {{ (datasource "datasources/spaceporn/relay.yaml" ).host }}
          Image: ${SPACEPORN_RELAY_IMG}
          HostConfig:
            ReadonlyRootfs: true
            Mounts:
              - <<: *volume
                source: ${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
                target: ${TMP_XSERVER_SOCKETS_PATH}
              - <<: *volume
                source: ${RELAY_VAR_LOG_VOLUME}
                target: ${VAR_LOG_PATH}
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").proxified_xserver_socket_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").spaceporn_relay_ip }}
        depends_on:
          - images.build.spaceporn.relay
          - networks.create.{{ (datasource "datasources/networks.yaml").proxified_xserver_socket_network }}
          - volumes.create.${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.spaceporn.runner
          name: {{ (datasource "datasources/spaceporn/runner.yaml" ).host }}
          Hostname: {{ (datasource "datasources/spaceporn/runner.yaml" ).host }}
          Entrypoint:
            - ${SPACEPORN_PATH}/${SPACEPORN_ID}/zig-out/bin/${SPACEPORN_ID}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                source: ${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
                target: ${TMP_XSERVER_SOCKETS_PATH}
              - <<: *readonly-volume
                source: ${SPACEPORN_VOLUME}
                target: ${SPACEPORN_PATH}
        depends_on:
          - volumes.create.${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.gpu
          - containers.create.virtual.isolated
      - id: containers.create.xserver
          name: {{ (datasource "datasources/xserver.yaml" ).host }}
          Hostname: {{ (datasource "datasources/xserver.yaml" ).host }}
          Image: ${XSERVER_IMG}
          ExposedPorts:
            - ${XSERVER_PORT}/tcp
          NetworkConfig:
            EndpointsConfig:
              {{ (datasource "datasources/networks.yaml").proxified_xserver_socket_network }}:
                IPv4Address: {{ (datasource "datasources/networks.yaml").xserver_ip }}
          HostConfig:
            ReadonlyRootfs: true
            SecurityOpt:
              - no-new-privileges:true
            Mounts:
              - <<: *readonly-bind
                source: ${XSERVER_SOCKET_PATH}
                target: ${XSERVER_SOCKET_PATH}
              - <<: *readonly-volume
                source: ${XSERVER_ETC_NGINX_VOLUME}
                target: ${ETC_NGINX_PATH}
              - <<: *readonly-volume
                source: ${XSERVER_OPT_SCRIPTS_VOLUME}
                target: ${OPT_SCRIPTS_PATH}
              - <<: *volume
                source: ${XSERVER_VAR_LOG_NGINX_VOLUME}
                target: ${VAR_LOG_NGINX_PATH}
            Tmpfs:
              /run: ""
        depends_on:
          - images.build.xserver
          - networks.create.{{ (datasource "datasources/networks.yaml").proxified_xserver_socket_network }}
          - volumes.create.${XSERVER_ETC_NGINX_VOLUME}
          - volumes.create.${XSERVER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${XSERVER_VAR_LOG_NGINX_VOLUME}

...
