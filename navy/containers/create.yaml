---

include:
  - containers/create/virtual.yaml

tasks:
  - endpoint: /containers/create
    method: POST
    loop:
      - id: containers.create.builder
        query:
          name: ${BUILDER_HOST}
          Hostname: ${BUILDER_HOST}
          Image: ${BUILDER_IMG}
          Cmd:
            - --addr
            - tcp://0.0.0.0:${BUILDER_PORT}
            - --config
            - ${_BUILDKIT_CONF_PATH}
            - --oci-worker-no-process-sandbox
          ExposedPorts:
            - ${BUILDER_PORT}/tcp
          HostConfig:
            SecurityOpt:
              - apparmor:unconfined
              - seccomp:unconfined
          NetworkConfig:
            EndpointsConfig:
              ${_DOCKER_NET}:
                IPv4Address: ${BUILDER_IP}
        depends_on:
          - images.build.builder
          - networks.create.${_DOCKER_NET}
        extends:
          - containers.create.virtual.base
      - id: containers.create.carpenter.relay
          name: ${CARPENTER_RELAY_HOST}
          Hostname: ${CARPENTER_RELAY_HOST}
          Image: ${CARPENTER_RELAY_IMG}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
                Target: ${TMP_XSERVER_SOCKETS_PATH}
              - <<: *volume
                Source: ${RELAY_VAR_LOG_VOLUME}
                Target: ${VAR_LOG_PATH}
            ReadonlyRootfs: true
          NetworkConfig:
            EndpointsConfig:
              ${PROXIFIED_XSERVER_SOCKET_NET}:
                IPv4Address: ${CARPENTER_RELAY_IP}
        depends_on:
          - images.build.carpenter.relay
          - networks.create.${PROXIFIED_XSERVER_SOCKET_NET}
          - volumes.create.${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.carpenter.runner
          name: ${CARPENTER_RUNNER_HOST}
          Hostname: ${CARPENTER_RUNNER_HOST}
          Image: ${CARPENTER_RUNNER_IMG}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
                Target: ${TMP_XSERVER_SOCKETS_PATH}
        depends_on:
          - images.build.carpenter.runner
          - volumes.create.${CARPENTER_RELAY_XSERVER_SOCKET_VOLUME}
        extends:
          - containers.create.virtual.isolated
      - id: containers.create.controller
          name: ${CONTROLLER_HOST}
          Hostname: ${CONTROLLER_HOST}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: ${MYWHALEFLEET_PATH}
          NetworkConfig:
            EndpointsConfig:
              ${_DOCKER_NET}:
                IPv4Address: ${CLIENT_IP}
              ${PROXIFIED_DOCKER_SOCKET_NET}:
                IPv4Address: ${CONTROLLER_IP}
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
        extends:
          - containers.create.virtual.docker
      - id: containers.create.editor
          name: ${EDITOR_HOST}
          Hostname: ${EDITOR_HOST}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: ${MYWHALEFLEET_PATH}
              - <<: *volume
                Source: ${SPACEPORN_VOLUME}
                Target: ${SPACEPORN_PATH}
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.vim
      - id: containers.create.explorer.shell
          name: ${SHELL_EXPLORER_HOST}
          Hostname: ${SHELL_EXPLORER_HOST}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${MYWHALEFLEET_VOLUME}
                Target: ${MYWHALEFLEET_PATH}
        depends_on:
          - volumes.create.${MYWHALEFLEET_VOLUME}
        extends:
          - containers.create.virtual.shell
      - id: containers.create.explorer.zig
          name: ${ZIG_EXPLORER_HOST}
          Hostname: ${ZIG_EXPLORER_HOST}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${SPACEPORN_VOLUME}
                Target: ${SPACEPORN_PATH}
        depends_on:
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.zig
      - id: containers.create.jumper
          name: ${JUMPER_HOST}
          Hostname: ${JUMPER_HOST}
          Image: ${JUMPER_IMG}
          Tty: true
          AttachStdout: true
          AttachStderr: true
          NetworkConfig:
            EndpointsConfig:
              ${JUMP_AREA_NET}: {}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_DATA_VOLUME}
                Target: /opt/${LISTENER_ID}${DATA_PATH}
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_SCRIPTS_VOLUME}
                Target: /opt/${LISTENER_ID}${OPT_SCRIPTS_PATH}
              - <<: *readonly-volume
                Source: ${LISTENER_VAR_LOG_VOLUME}
                Target: /opt/${LISTENER_ID}${VAR_LOG_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_ETC_NGINX_VOLUME}
                Target: /opt/${PROXY_ID}${ETC_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_OPT_SCRIPTS_VOLUME}
                Target: /opt/${PROXY_ID}${OPT_SCRIPTS_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_VAR_LOG_NGINX_VOLUME}
                Target: /opt/${PROXY_ID}${VAR_LOG_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${RELAY_VAR_LOG_VOLUME}
                Target: /opt/${RELAY_ID}${VAR_LOG_PATH}
              - <<: *readonly-volume
                Source: ${SSH_VOLUME}
                Target: ${OPT_SSH_PATH}
              - <<: *volume
                Source: ${THEME_VOLUME}
                Target: ${BASH_THEME_PATH}
              - <<: *readonly-volume
                Source: ${XSERVER_ETC_NGINX_VOLUME}
                Target: /opt/${XSERVER_ID}${ETC_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${XSERVER_OPT_SCRIPTS_VOLUME}
                Target: /opt/${XSERVER_ID}${OPT_SCRIPTS_PATH}
              - <<: *readonly-volume
                Source: ${XSERVER_VAR_LOG_NGINX_VOLUME}
                Target: /opt/${XSERVER_ID}${VAR_LOG_NGINX_PATH}
        depends_on:
          - images.build.jumper
          - networks.create.${JUMP_AREA_NET}
          - volumes.create.${LISTENER_OPT_DATA_VOLUME}
          - volumes.create.${LISTENER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${LISTENER_VAR_LOG_VOLUME}
          - volumes.create.${PROXY_ETC_NGINX_VOLUME}
          - volumes.create.${PROXY_OPT_SCRIPTS_VOLUME}
          - volumes.create.${PROXY_VAR_LOG_NGINX_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
          - volumes.create.${SSH_VOLUME}
          - volumes.create.${XSERVER_ETC_NGINX_VOLUME}
          - volumes.create.${XSERVER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${XSERVER_VAR_LOG_NGINX_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.listener
          name: ${LISTENER_HOST}
          Hostname: ${LISTENER_HOST}
          Image: ${LISTENER_IMG}
          NetworkConfig:
            EndpointsConfig:
              ${PROXIFIED_DOCKER_SOCKET_NET}:
                IPv4Address: ${LISTENER_IP}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${LISTENER_OPT_DATA_VOLUME}
                Target: ${DATA_PATH}
              - <<: *readonly-volume
                Source: ${LISTENER_OPT_SCRIPTS_VOLUME}
                Target: ${OPT_SCRIPTS_PATH}
              - <<: *volume
                Source: ${LISTENER_VAR_LOG_VOLUME}
                Target: ${VAR_LOG_PATH}
            ReadonlyRootfs: true
        depends_on:
          - images.build.jumper
          - networks.create.${PROXIFIED_DOCKER_SOCKET_NET}
          - volumes.create.${LISTENER_OPT_DATA_VOLUME}
          - volumes.create.${LISTENER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${LISTENER_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.proxy
          name: ${PROXY_HOST}
          Hostname: ${PROXY_HOST}
          Image: ${PROXY_IMG}
          ExposedPorts:
            - ${PROXY_PORT}/tcp
          NetworkConfig:
            EndpointsConfig:
              ${PROXIFIED_DOCKER_SOCKET_NET}:
                IPv4Address: ${PROXY_IP}
          HostConfig:
            Mounts:
              - <<: *readonly-bind
                Source: ${_DOCKER_SOCKET_PATH}
                Target: ${_DOCKER_SOCKET_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_ETC_NGINX_VOLUME}
                Target: ${ETC_NGINX_PATH}
              - <<: *readonly-volume
                Source: ${PROXY_OPT_SCRIPTS_VOLUME}
                Target: ${OPT_SCRIPTS_PATH}
              - <<: *volume
                Source: ${PROXY_VAR_LOG_NGINX_VOLUME}
                Target: ${VAR_LOG_NGINX_PATH}
            ReadonlyRootfs: true
            Tmpfs:
              /run: ""
              /tmp: ""
        depends_on:
          - images.build.proxy
          - networks.create.${PROXIFIED_DOCKER_SOCKET_NET}
          - volumes.create.${PROXY_ETC_NGINX_VOLUME}
          - volumes.create.${PROXY_OPT_SCRIPTS_VOLUME}
          - volumes.create.${PROXY_VAR_LOG_NGINX_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.registry
          name: ${REGISTRY_HOST}
          Hostname: ${REGISTRY_HOST}
          NetworkConfig:
            EndpointsConfig:
              ${_DOCKER_NET}:
                IPv4Address: ${REGISTRY_IP}
        extends:
          - containers.create.virtual.registry
      - id: containers.create.safedeposit
          name: ${SAFEDEPOSIT_HOST}
          Hostname: ${SAFEDEPOSIT_HOST}
          HostConfig:
            Mounts:
              - <<: *volume
                Source: ${SAFEDEPOSIT_VOLUME}
                Target: ${SAFEDEPOSIT_PATH}
        depends_on:
          - images.build.pass
          - volumes.create.${SAFEDEPOSIT_VOLUME}
        extends:
          - containers.create.virtual.pass
      - id: containers.create.scholar
          name: ${SCHOLAR_HOST}
          Hostname: ${SCHOLAR_HOST}
        extends:
          - containers.create.virtual.man
      - id: containers.create.spaceporn.relay
          name: ${SPACEPORN_RELAY_HOST}
          Hostname: ${SPACEPORN_RELAY_HOST}
          Image: ${SPACEPORN_RELAY_IMG}
          HostConfig:
            ReadonlyRootfs: true
            Mounts:
              - <<: *volume
                source: ${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
                target: ${TMP_XSERVER_SOCKETS_PATH}
              - <<: *volume
                source: ${RELAY_VAR_LOG_VOLUME}
                target: ${VAR_LOG_PATH}
          NetworkConfig:
            EndpointsConfig:
              ${PROXIFIED_XSERVER_SOCKET_NET}:
                IPv4Address: ${SPACEPORN_RELAY_IP}
        depends_on:
          - images.build.spaceporn.relay
          - networks.create.${PROXIFIED_XSERVER_SOCKET_NET}
          - volumes.create.${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${RELAY_VAR_LOG_VOLUME}
        extends:
          - containers.create.virtual.base
      - id: containers.create.spaceporn.runner
          name: ${SPACEPORN_RUNNER_HOST}
          Hostname: ${SPACEPORN_RUNNER_HOST}
          Entrypoint:
            - ${SPACEPORN_PATH}/${SPACEPORN_ID}/zig-out/bin/${SPACEPORN_ID}
          HostConfig:
            Mounts:
              - <<: *readonly-volume
                source: ${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
                target: ${TMP_XSERVER_SOCKETS_PATH}
              - <<: *readonly-volume
                source: ${SPACEPORN_VOLUME}
                target: ${SPACEPORN_PATH}
        depends_on:
          - volumes.create.${SPACEPORN_RELAY_XSERVER_SOCKET_VOLUME}
          - volumes.create.${SPACEPORN_VOLUME}
        extends:
          - containers.create.virtual.gpu
          - containers.create.virtual.isolated
      - id: containers.create.xserver
          name: ${XSERVER_HOST}
          Hostname: ${XSERVER_HOST}
          Image: ${XSERVER_IMG}
          ExposedPorts:
            - ${XSERVER_PORT}/tcp
          NetworkConfig:
            EndpointsConfig:
              ${PROXIFIED_XSERVER_SOCKET_NET}:
                IPv4Address: ${XSERVER_IP}
          HostConfig:
            ReadonlyRootfs: true
            SecurityOpt:
              - no-new-privileges:true
            Mounts:
              - <<: *readonly-bind
                source: ${XSERVER_SOCKET_PATH}
                target: ${XSERVER_SOCKET_PATH}
              - <<: *readonly-volume
                source: ${XSERVER_ETC_NGINX_VOLUME}
                target: ${ETC_NGINX_PATH}
              - <<: *readonly-volume
                source: ${XSERVER_OPT_SCRIPTS_VOLUME}
                target: ${OPT_SCRIPTS_PATH}
              - <<: *volume
                source: ${XSERVER_VAR_LOG_NGINX_VOLUME}
                target: ${VAR_LOG_NGINX_PATH}
            Tmpfs:
              /run: ""
        depends_on:
          - images.build.xserver
          - networks.create.${PROXIFIED_XSERVER_SOCKET_NET}
          - volumes.create.${XSERVER_ETC_NGINX_VOLUME}
          - volumes.create.${XSERVER_OPT_SCRIPTS_VOLUME}
          - volumes.create.${XSERVER_VAR_LOG_NGINX_VOLUME}

...
