---

run:
  - endpoint: /build
    method: POST
    loop:
      - id: '{{ $dependencies.images.build.builder }}'
        query:
          buildargs:
            _BUILDKIT_CONF_PATH: '{{ $buildkit.path.conf }}'
            _BUILDKIT_LOCAL_IMG: '{{ $buildkit.image.local }}{{ $all.sep.tag }}{{ $buildkit.tag }}'
            REGISTRY_TARGET: '{{ $registry.target }}'
          t: '{{ $builder.yaml").image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${BUILDER_ID}
        depends_on:
          - '{{ $dependencies.images.tag.buildkit }}'
        extends:
          - '{{ $dependencies.images.build.virtual._ }}'
      - id: '{{ $dependencies.images.build.carpenter.relay }}'
        query:
          buildargs:
            LOG_ID: ${CARPENTER_ID}
          t: '{{ $carpenterrelay.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        extends:
          - '{{ $dependencies.images.build.virtual.relay }}'
      - id: '{{ $dependencies.images.build.carpenter.runner }}'
        query:
          buildargs:
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            SPECTRWM_LAYER_IMG: '{{ $spectrwm.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          t: '{{ $carpenterrunner.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${CARPENTER_ID}
        depends_on:
          - '{{ $dependencies.images.build.spectrwm }}'
        extends:
          - '{{ $dependencies.images.build.virtual._ }}'
      - id: '{{ $dependencies.images.build.jumper }}'
        query:
          buildargs:
            BASH_COMPLETION_PATH: '{{ $bash.path.completion }}'
            BASH_THEME_PATH: '{{ $bash.path.theme }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${JUMPER_ID}.sh
            COMPLETION_PATH: '/opt/${LISTENER_ID}{{ $listener.path.completion }}'
            CONTROLLER_ID: ${CONTROLLER_ID}
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            NET_PFX: ${JUMP_AREA_PFX}
            OPT_SCRIPTS_PATH: '{{ $all.path.opt.scripts }}'
            OPT_SSH_PATH: '{{ $all.path.opt.ssh }}'
            SSH_PORT: '{{ $sshd.port }}'
            SSH_ROOT_PATH: '{{ $all.path.root.ssh }}'
            TCP_DOCKER_TARGET: '{{ $docker.target.tcp }}'
            TMUX_LAYER_IMG: '{{ $tmux.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
          t: '{{ $jumper.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${JUMPER_ID}
        depends_on:
          - '{{ $dependencies.images.build.tmux }}'
        extends:
          - '{{ $dependencies.images.build.virtual._ }}'
      - id: '{{ $dependencies.images.build.listener }}'
        query:
          buildargs:
            _DOCKER_SOCKET_PATH: '{{ $docker.path.socket }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${LISTENER_ID}.sh
            COMPLETION_PATH: '{{ $listener.path.completion }}'
            DATA_PATH: '{{ $all.path.opt.data }}'
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            HTTP_DOCKER_TARGET: '{{ $docker.target.http }}'
            NET: '{{ $networks.jump_area.name }}'
            OPT_SCRIPTS_PATH: '{{ $all.path.opt.scripts }}'
            VAR_LOG_PATH: '{{ $all.path.var.log }}'
          t: '{{ $listener.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${LISTENER_ID}
        extends:
          - '{{ $dependencies.images.build.virtual.alpine.entrypoint }}'
      - id: '{{ $dependencies.images.build.socketproxy }}'
        query:
          buildargs:
            _DOCKER_SOCKET_PATH: '{{ $docker.path.socket }}'
            ${API_PFX}_PING: true
            ${API_PFX}BUILD: true
            ${API_PFX}CONTAINERS_CREATE: true
            ${API_PFX}CONTAINERS_ID: true
            ${API_PFX}CONTAINERS_ID_ARCHIVE: true
            ${API_PFX}CONTAINERS_ID_ATTACH: true
            ${API_PFX}CONTAINERS_ID_EXEC: true
            ${API_PFX}CONTAINERS_ID_JSON: true
            ${API_PFX}CONTAINERS_ID_KILL: true
            ${API_PFX}CONTAINERS_ID_LOGS: true
            ${API_PFX}CONTAINERS_ID_START: true
            ${API_PFX}CONTAINERS_ID_STOP: true
            ${API_PFX}CONTAINERS_ID_WAIT: true
            ${API_PFX}CONTAINERS_JSON: true
            ${API_PFX}EVENTS: true
            ${API_PFX}IMAGES_CREATE: true
            ${API_PFX}IMAGES_JSON: true
            ${API_PFX}IMAGES_NAME: true
            ${API_PFX}NETWORKS: true
            ${API_PFX}VERSION: true
            ${API_PFX}VOLUMES: true
            API_PFX: ${API_PFX}
            API_TAG: '{{ $api.tag }}'
            API_URL: '{{ $api.url.spec }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${PROXY_ID}.sh
            CONTROLLER_IP: '{{ $controller.ip }}'
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            ETC_NGINX_HTTPD_PATH: '{{ $nginx.path.httpd }}'
            HTTP_LAYER_IMG: '{{ $http.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            LISTENER_IP: '{{ $listener.ip }}'
            OPT_SCRIPTS_PATH: '{{ $all.path.opt.scripts }}'
            PROXY_PORT: '{{ $socketproxy.port }}'
          t: '{{ $socketproxy.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${PROXY_ID}
        depends_on:
          - '{{ $dependencies.images.build.http }}'
        extends:
          - '{{ $dependencies.images.build.virtual._ }}'
      - id: '{{ $dependencies.images.build.spaceporn.relay }}'
        query:
          buildargs:
            LOG_ID: ${SPACEPORN_ID}
          t: '{{ $spacepornrelay.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        extends:
          - '{{ $dependencies.images.build.virtual.relay }}'
      - id: '{{ $dependencies.images.build.xserver }}'
        query:
          buildargs:
            CARPENTER_RELAY_IP: '{{ $carpenterrelay.ip }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${XSERVER_ID}.sh
            ETC_NGINX_CONFD_PATH: '{{ $nginx.path.confd }}'
            ETC_NGINX_PATH: '{{ $nginx.path.etc }}'
            SPACEPORN_RELAY_IP: '{{ $spacepornrelay.ip }}'
            VAR_LOG_NGINX_PATH: '{{ $nginx.path.var.log }}'
            XSERVER_PORT: '{{ $xserver.port }}'
            XSERVER_SOCKET_PATH: '{{ $xserver.path.display }}'
          t: '{{ $xserver.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${XSERVER_ID}
        extends:
          - '{{ $dependencies.images.build.virtual.nginx }}'

...
