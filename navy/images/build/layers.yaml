---

run:
  - endpoint: /build
    method: POST
    loop:
      - id: images.build.alpine.entrypoint
        query:
          buildargs:
            BASE_IMG: '{{ $all.os.image.local }}{{ $all.sep.tag }}{{ $all.os.tag }}'
          t: '{{ $entrypointalpine.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.tag.alpine
        extends:
          - images.build.virtual.entrypoint
      - id: images.build.bash.entrypoint
        query:
          buildargs:
            BASE_IMG: '{{ $bash.image.local }}{{ $all.sep.tag }}{{ $bash.tag }}'
          t: '{{ $entrypointbash.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        depends_on:
          - images.tag.bash
        extends:
          - images.build.virtual.entrypoint
      - id: images.build.gpu
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${GPU_ID}.sh
          t: '{{ $gpu.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${GPU_ID}
        extends:
          - images.build.virtual.alpine.entrypoint
      - id: images.build.linguist
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${LINGUIST_ID}.sh
          t: '{{ $linguist.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${LINGUIST_ID}
        extends:
          - images.build.virtual.alpine.entrypoint
      - id: images.build.nginx
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${NGINX_ID}.sh
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            ETC_NGINX_CONFD_PATH: '{{ $nginx.path.confd }}'
            ETC_NGINX_HTTPD_PATH: '{{ $nginx.path.httpd }}'
            VAR_LOG_NGINX_PATH: '{{ $nginx.path.var.log }}'
          t: '{{ $nginx.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${NGINX_ID}
        extends:
          - images.build.virtual.alpine.entrypoint
      - id: images.build.socat
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${SOCAT_ID}.sh
          t: '{{ $socat.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${SOCAT_ID}
        extends:
          - images.build.virtual.alpine.entrypoint
      - id: images.build.spectrwm
        query:
          buildargs:
            BIN_PATH: '{{ $all.path.bin }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${SPECTRWM_ID}.sh
          t: '{{ $spectrwm.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${SPECTRWM_ID}
        extends:
          - images.build.virtual.alpine.entrypoint
      - id: images.build.http
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${HTTP_ID}.sh
            ETC_NGINX_HTTPD_PATH: '{{ $nginx.path.httpd }}'
            ETC_NGINX_PATH: '{{ $nginx.path.etc }}'
            LINUXSERVER_PROXY_LOCAL_IMG: '{{ $socketproxy.linuxserver.image.local }}{{ all.sep.tag }}{{ $socketproxy.linuxserver.tag }}'
          t: '{{ $http.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${HTTP_ID}
        depends_on:
          - images.tag.proxy
        extends:
          - images.build.virtual.nginx
      - id: images.build.bash
        query:
          buildargs:
            BASH_ALIASES_PATH: '{{ $bash.path.aliases }}'
            BASH_COMPLETION_PATH: '{{ $bash.path.completion }}'
            BASH_ENTRYPOINT_LAYER_IMG: '{{ $entrypointbash.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            BASH_LOCAL_IMG: '{{ $bash.image.local }}{{ $all.sep.tag }}{{ $bash.tag }}'
            BASH_THEME_PATH: '{{ $bash.path.theme }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${BASH_ID}.sh
            ENTRYPOINT_PATH: '{{ $entrypoint.path.entrypoint.sh }}'
          t: '{{ $bash.image.layer }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${BASH_ID}
        depends_on:
          - images.build.bash.entrypoint
        extends:
          - images.build.virtual.base
      - id: images.build.tmux
        query:
          buildargs:
            BASH_COMPLETION_PATH: '{{ $bash.path.completion }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${TMUX_ID}.sh
            TMUX_COMPLETION_URL: '{{ $tmux.url.completion }}'
            TPM_PATH: '{{ $tmux.path.tpm }}'
            TPM_URL: '{{ $tmux.url.tpm }}'
          t: '{{ $tmux.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${TMUX_ID}
        extends:
          - images.build.virtual.bash
      - id: images.build.sshd
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${SSHD_ID}.sh
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            SSH_PORT: '{{ $sshd.port }}'
          t: '{{ $sshd.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${SSHD_ID}
        extends:
          - images.build.virtual.bash
      - id: images.build.docker
        query:
          buildargs:
            _DOCKER_LOCAL_IMG: '{{ $docker.image.local }}{{ $all.sep.tag }}{{ $docker.tag }}'
            _DOCKER_PLUGINS_PATH: '{{ docker.path.plugins }}'
            BIN_PATH: '{{ $all.path.bin }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${_DOCKER_ID}.sh
            DOCKLE_DOWNLOAD_URL: '{{ $dockle.url.download }}'
            DOCKLE_TAG: '{{ $dockle.tag }}'
            ENTRYPOINTD_PATH: '{{ $entrypoint.path.entrypoint.d }}'
            HTTP_DOCKER_TARGET: '{{ $docker.target.http }}'
            NET: '{{ $networks.jump_area.name }}'
            REGBOT_URL: '{{ $docker.url.regbot }}'
            REGCTL_URL: '{{ $docker.url.regctl }}'
            REGISTRY_TARGET: '{{ $registry.target }}'
            REGSYNC_URL: '{{ $docker.url.regsync }}'
            TCP_BUILDKIT_TARGET: '{{ $buildkit.target.tcp }}'
            TCP_DOCKER_TARGET: '{{ $docker.target.tcp }}'
            XEPHYR_DISPLAY: ${XEPHYR_DISPLAY}
          t: '{{ $docker.image.layer }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${DOCKER_ID}
        depends_on:
          - images.tag.docker
        extends:
          - images.build.virtual.sshd
      - id: images.build.man
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${MAN_ID}.sh
          t: '{{ $man.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${MAN_ID}
        extends:
          - images.build.virtual.sshd
      - id: images.build.pass
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${PASS_ID}.sh
          t: '{{ $pass.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${PASS_ID}
        extends:
          - images.build.virtual.sshd
      - id: images.build.workspaces
        query:
          buildargs:
            OPT_SCRIPTS_PATH: '{{ $all.path.opt.scripts }}'
            OWNER_URL: '{{ $all.owner.url }}'
            SPACEPORN_ID: ${SPACEPORN_ID}
            SSHD_LAYER_IMG: '{{ $sshd.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            WORKSPACES_PATH: '{{ $workspaces.path.root }}'
          t: '{{ $workspaces.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${WORKSPACES_ID}
        extends:
          - images.build.virtual.sshd
      - id: images.build.vim
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${VIM_ID}.sh
            NERDTREE_URL: '{{ $vim.url.plugin.nerdtree }}'
            POLYGLOT_URL: '{{ $vim.url.plugin.polyglot }}'
            RAINBOW_URL: '{{ $vim.url.plugin.rainbow }}'
            UNDOTREE_URL: '{{ $vim.url.plugin.undotree }}'
          t: '{{ $vim.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${VIM_ID}
        extends:
          - images.build.virtual.workspaces
      - id: images.build.explorer
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${EXPLORER_ID}.sh
          t: '{{ $explorer.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${EXPLORER_ID}
        extends:
          - images.build.virtual.workspaces
      - id: images.build.git
        query:
          buildargs:
            BASH_COMPLETION_PATH: '{{ $bash.path.completion }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${GIT_ID}.sh
            EXPLORER_LAYER_IMG: '{{ $explorer.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            TIG_COMPLETION_URL: '{{ $git.url.tig.completion }}'
          t: '{{ $git.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${GIT_ID}
        depends_on:
          - images.build.explorer
        extends:
          - images.build.virtual.base
      - id: images.build.shell
        query:
          buildargs:
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${SHELL_ID}.sh
          t: '{{ $shell.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${SHELL_ID}
        extends:
          - images.build.virtual.git
      - id: images.build.zig
        query:
          buildargs:
            BASH_COMPLETION_PATH: '{{ $bash.path.completion }}'
            BIN_PATH: '{{ $all.path.bin }}'
            CHECK_ENTRYPOINT_PATH: '{{ $entrypoint.path.check.d }}'/99${ZIG_ID}.sh
            ZIG_BUILDS_URL: '{{ $zig.url.builds }}'
            ZIG_COMPLETION_URL: '{{ $zig.url.completion }}'
            ZIG_TAG: '{{ $zig.tag }}'
          t: '{{ $zig.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
        context: '{{ $all.path.dockerfiles }}'/${ZIG_ID}
        extends:
          - images.build.virtual.git

...
