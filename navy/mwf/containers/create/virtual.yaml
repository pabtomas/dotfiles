---

rule:
  id: '{{ $rules.up }}'
  run:
    - loop:
        endpoint: /containers/create
        method: POST
        from:
          - id: '{{ $dependencies.containers.create.virtual._ }}'
            virtual: true
            query:
              HostConfig:
                Privileged: false
              Labels:
                navy: '{{ $project.id }}'
          - id: '{{ $dependencies.containers.create.virtual.docker }}'
            virtual: true
            query:
              Image: '{{ docker.image.layer }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
              NetworkingConfig:
                EndpointsConfig:
                  '{{ $networks.docker_utils.name }}': {}
                  '{{ $networks.proxified_docker_socket.name }}': {}
            depends_on:
              - '{{ $dependencies.images.build.docker }}'
              - '{{ $dependencies.networks.create.docker_utils }}'
              - '{{ $dependencies.networks.create.proxified_docker_socket }}'
            extends:
              - '{{ $dependencies.containers.create.virtual._ }}'
          - id: '{{ $dependencies.containers.create.virtual.isolated }}'
            virtual: true
            query:
              HostConfig:
                NetworkMode: none
            extends:
              - '{{ $dependencies.containers.create.virtual._ }}'
          - id: '{{ $dependencies.containers.create.virtual.gpu }}'
            virtual: true
            query:
              Image: '{{ $gpu.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
              Devices:
                - PathOnHost: '{{ $gpu.path.dev.gpu }}'
                  PathInContainer: '{{ $gpu.path.dev.gpu }}'
                  CgroupPermissions: rwm
                - PathOnHost: '{{ $gpu.path.dev.vga }}'
                  PathInContainer: '{{ $gpu.path.dev.vga }}'
                  CgroupPermissions: rwm
              GroupAdd:
                - render
                - video
            depends_on:
              - '{{ $dependencies.images.build.gpu }}'
            extends:
              - '{{ $dependencies.containers.create.virtual._ }}'
          - id: '{{ $dependencies.containers.create.virtual.man }}'
            virtual: true
            query:
              Image: '{{ $man.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            depends_on:
              - '{{ $dependencies.images.build.man }}'
            extends:
              - '{{ $dependencies.containers.create.virtual.sshd }}'
          - id: '{{ $dependencies.containers.create.virtual.pass }}'
            virtual: true
            query:
              Image: '{{ $pass.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            depends_on:
              - '{{ $dependencies.images.build.pass }}'
            extends:
              - '{{ $dependencies.containers.create.virtual.sshd }}'
          - id: '{{ $dependencies.containers.create.virtual.registry }}'
            virtual: true
            query:
              Image: '{{ $registry.image.local }}{{ $all.sep.tag }}{{ $registry.tag }}'
              Env:
                - REGISTRY_LOG_ACCESSLOG_DISABLED=false
                - REGISTRY_LOG_FORMATTER=text
                - REGISTRY_LOG_LEVEL=info
                - 'REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY={{ $all.path.opt.data }}'
              HostConfig:
                Mounts:
                  - Source: '{{ $registry.volume }}'
                    Target: '{{ $all.path.opt.data }}'
                    Type: volume
                    VolumeOptions: {}
                ReadonlyRootfs: true
              NetworkingConfig:
                EndpointsConfig:
                  '{{ $networks.docker_utils.name }}': {}
            depends_on:
              - '{{ $dependencies.images.tag.registry }}'
              - '{{ $dependencies.networks.create.docker_utils }}'
              - '{{ $dependencies.volumes.create.registry }}'
            extends:
              - '{{ $dependencies.containers.create.virtual._ }}'
          - id: '{{ $dependencies.containers.create.virtual.sshd }}'
            virtual: true
            query:
              Image: '{{ $sshd.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
              ExposedPorts:
                - '{{ $sshd.port }}/tcp'
              HostConfig:
                Mounts:
                  - Source: '{{ $sshd.volume }}'
                    Target: '{{ $all.path.root.ssh }}'
                    Type: volume
                    VolumeOptions: {}
                    ReadOnly: true
                  - Source: '{{ $bash.volume.theme }}'
                    Target: '{{ $bash.path.theme }}'
                    Type: volume
                    VolumeOptions: {}
                    ReadOnly: true
              NetworkingConfig:
                EndpointsConfig:
                  '{{ $networks.jump_area.name }}': {}
            depends_on:
              - '{{ $dependencies.images.build.sshd }}'
              - '{{ $dependencies.networks.create.jump_area }}'
              - 'volume.create.{{ $sshd.volume }}'
              - 'volume.create.{{ $bash.volume.theme }}'
            extends:
              - '{{ $dependencies.containers.create.virtual._ }}'
          - id: '{{ $dependencies.containers.create.virtual.shell }}'
            virtual: true
            query:
              Image: '{{ $shell.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            depends_on:
              - '{{ $dependencies.images.build.shell }}'
            extends:
              - '{{ $dependencies.containers.create.virtual.sshd }}'
          - id: '{{ $dependencies.containers.create.virtual.vim }}'
            virtual: true
            query:
              Image: '{{ $vim.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            depends_on:
              - '{{ $dependencies.images.build.vim }}'
            extends:
              - '{{ $dependencies.containers.create.virtual.sshd }}'
          - id: '{{ $dependencies.containers.create.virtual.zig }}'
            virtual: true
            query:
              Image: '{{ $zig.image }}{{ $all.sep.tag }}{{ $all.owner.tag }}'
            depends_on:
              - '{{ $dependencies.images.build.zig }}'
            extends:
              - '{{ $dependencies.containers.create.virtual.sshd }}'

...
