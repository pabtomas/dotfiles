# Quality of Life {{{1

# setting the delay between prefix and command
set-option -s escape-time 5

# allow arrow keys to be used immediatly after changing window
set-option -g repeat-time 0

# don't rename windows automatically
set-option -g allow-rename off
set-option -g automatic-rename on
set-option -g automatic-rename-format ''

# Enable names for panes
set-option -g pane-border-status top
set-option -g pane-border-format ' [#P] '

# base index
set-option -g base-index 1
set-option -g pane-base-index 1

# status line needs this feature to be functionnal
set-option -g renumber-windows on

# }}}
# Mappings {{{1

# Unbind prefix
set-option -g prefix None
unbind-key C-b

# tree
unbind-key s
unbind-key w
bind-key -n 'M-!' choose-session -N -Z

# command prompt
unbind-key :
bind-key -n 'M-:' command-prompt

# keys list
unbind-key ?
bind-key -n 'M-?' list-keys

#   COPY Mode {{{2

# allow mouse events and disable copy mode
set-option -g mouse on
set-hook -g after-copy-mode 'copy-mode -q'

# copy-paste tmux register to copy-paste system register
bind-key -n 'M-o' run-shell '\
CLIP="$(xsel -o --clipboard 2> /dev/null)";\
VIM="$(tmux show-buffer -b vim 2> /dev/null)";\
DEFAULT="$(tmux show-buffer -b default 2> /dev/null)";\
if [ -z "${DEFAULT}" ]; then xsel --clear --clipboard 2> /dev/null; else printf "%s" "${DEFAULT}" | xsel -i --clipboard; fi;\
if [ -z "${VIM}" ]; then tmux delete-buffer -b default 2> /dev/null || :; else tmux set-buffer -b default "${VIM}"; fi;\
if [ -z "${CLIP}" ]; then tmux delete-buffer -b vim 2> /dev/null || :; else tmux set-buffer -b vim "${CLIP}"; fi'

# paste
bind-key -n 'M-p' paste-buffer -b default
bind-key -n 'M-P' paste-buffer -b vim

#   }}}
#   Panes {{{2

# splitting panes
unbind-key %
unbind-key '"'
bind-key -n 'M-d' run-shell 'tmux split-window -h -c "$(tmux -S ~/.tmux/nested/"$(ps -ao "ppid,args" | grep -E "$(tmux display-message -p "#{pane_pid}")" | sed -E "s/^.*\/.tmux\/nested\/(.*)\/0.*$/\1/g")"/0 display-message -p "#{l:#{pane_current_path}}")"'
bind-key -n 'M-s' run-shell 'tmux split-window -v -c "$(tmux -S ~/.tmux/nested/"$(ps -ao "ppid,args" | grep -E "$(tmux display-message -p "#{pane_pid}")" | sed -E "s/^.*\/.tmux\/nested\/(.*)\/0.*$/\1/g")"/0 display-message -p "#{l:#{pane_current_path}}")"'

# switching panes
unbind-key Left
unbind-key Right
unbind-key Up
unbind-key Down
bind-key -n 'M-Left' select-pane -L
bind-key -n 'M-Right' select-pane -R
bind-key -n 'M-Up' select-pane -U
bind-key -n 'M-Down' select-pane -D

# swap panes
bind-key -n 'M-m' command-prompt -I "" { swap-pane -t "%%"; select-pane -t "%%" }

# killing panes
unbind-key x
bind-key -n 'M-q' kill-pane

# switching layout
unbind-key Space
bind-key -n 'M-Enter' next-layout

# zooming in/out current pane
unbind-key z
bind-key -n 'M-f' resize-pane -Z

#   }}}
#   Windows {{{2

# new window
unbind-key c
bind-key -n 'M-w' run-shell 'tmux new-window -c "$(tmux -S ~/.tmux/nested/"$(ps -ao "ppid,args" | grep -E "$(tmux display-message -p "#{pane_pid}")" | sed -E "s/^.*\/.tmux\/nested\/(.*)\/0.*$/\1/g")"/0 display-message -p "#{l:#{pane_current_path}}")"'

# switching window
unbind-key n
unbind-key p
bind-key -n 'M-c' next-window
bind-key -n 'M-x' previous-window

# renaming window
unbind-key ,
bind-key -n 'M-W' command-prompt -I "#W" { rename-window "%%" }

#   }}}
#   Sessions {{{2

# new session
bind-key -n 'M-<' command-prompt -p "(new-session)" {
  run-shell 'tmux set-environment -g TMUX_CURRENT_PANE_DIR "$(tmux -S ~/.tmux/nested/"$(ps -ao "ppid,args" | grep -E "$(tmux display-message -p "#{pane_pid}")" | sed -E "s/^.*\/.tmux\/nested\/(.*)\/0.*$/\1/g")"/0 display-message -p "#{l:#{pane_current_path}}")"'
  new-session -A -s '%%' -c '#{TMUX_CURRENT_PANE_DIR}'
  set-environment -g -u TMUX_CURRENT_PANE_DIR
}

# detach session
unbind-key d
bind-key -n 'M-z' detach-client

# rename session
unbind-key $
bind-key -n 'M->' command-prompt -I "#S" { rename-session "%%" }

# kill session
bind-key -n 'M-k' command-prompt -p '(kill-session)' { kill-session -t '%%' }

#   }}}
# }}}
# Style {{{1

# enable 256 colors
set-option -g default-terminal xterm-256color

# message style
set-option -g message-style "fg=colour$GRAY_900,bg=colour$WHITE,bold"

# set copy selection style and cursorline selection style
set-option -g mode-style "fg=colour$GRAY_900,bg=colour$WHITE,bold"

# set inactive/active panes styles
set-option -g window-style "fg=colour$GRAY_500"
set-option -g window-active-style "fg=colour$GRAY_500,bg=colour$GRAY_900"
set-option -g pane-active-border-style "fg=colour$THEME,bg=colour$GRAY_900"

set-option -g pane-border-lines 'heavy'

# statusline
set-option -g status-style "fg=colour$GRAY_900,bg=colour$THEME,bold"
set-option -g status-format[0] "▌#{session_name}\
#{?#{e|==:#{active_window_index},1},▐, }#{W:#{?window_active,\
#[fg=colour$THEME#,bg=colour$GRAY_900]#{?#{e|==:#{window_index},1},,▌}\
#{?#{e|>:#{w:window_name},0},#{window_name},#{window_index}\
}▐,#[fg=colour$GRAY_900#,bg=colour$THEME]\
#{?#{||:#{e|==:#{e|+:#{active_window_index},1},#{window_index}},\
#{e|==:#{window_index},1}},, }\
#{?#{e|>:#{w:window_name},0},#{window_name},#{window_index}\
}}\
}"

# message style
set-option -g message-style "fg=colour$GRAY_900,bg=colour$WHITE,bold"

# }}}
# Plugins {{{1

set-option -g @plugin 'tmux-plugins/tmux-resurrect'
bind-key -n 'M-y' 'run-shell "$(tmux show-options -gqv @resurrect-save-script-path)"'
bind-key -n 'M-u' 'run-shell "$(tmux show-options -gqv @resurrect-restore-script-path)"'
set-hook -g client-detached 'run-shell "$(tmux show-options -gqv @resurrect-save-script-path)"'
set-option -g @resurrect-processes 'tmux'
set-option -g @resurrect-dir "$HOME/.tmux/resurrect"
set-option -g @nested-dir "$HOME/.tmux/nested"
set-hook -g @resurrect-hook-post-save-all '\
set -- "$(tmux show-options -gqv @nested-dir)"/*;\
while [[ ${#} -gt 0 ]];\
do\
  set -- "$(tmux -S "${1}/0" display-message -p "#{client_pid}")" "${@}";\
  if [[ -z "${1}" ]];\
  then\
    [[ -f "${2}/resurrect" ]] && rm -f "${2}/resurrect";\
  else\
    ps -ao "ppid,stat,args" | while read -r PS;\
    do\
      case "${PS}" in\
        "$(tmux -S "${2}/0" display-message -p "#{pane_pid}") "*)\
          (\
            set -- ${PS};\
            if [[ "${2%+}" != "${2}" ]];\
            then\
              set -- $(pwdx "${1}") $(shift 2; printf "%s" "${*}");\
              shift;\
              printf "%s\n" "${*}";\
            fi\
          ) ;;\
        *) ;;\
      esac;\
    done > "${2}/resurrect";\
  fi;\
  shift 2;\
done'
set-hook -g @resurrect-hook-pre-restore-all '\
tmux set-environment -g TMUX_IS_RESTORING "true";\
set -- "$(tmux show-options -gqv @nested-dir)"/*;\
while [[ ${#} -gt 0 ]];\
do\
  set -- "$(tmux -S "${1}/0" display-message -p "#{client_pid}")" "${@}";\
  if [[ -n "${1}" ]];\
  then\
    tmux -S "${2}/0" kill-server;\
    rm -rf "${2}";\
  fi;\
  shift 2;\
done'

set-option -g @plugin 'tmux-plugins/tmux-continuum'
set-option -g @continuum-save-interval '0'
set-option -g @continuum-restore 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run-shell '~/.tmux/plugins/tpm/tpm'

# }}}
