unalias -a

function bus () {
  watch -n 10 --color -t "printf \"🚍 \033[1;47;1;44m 3 \033[0m Collège Hastignan\n$(curl https://ws.infotbm.com/ws/1.0/get-realtime-pass/3049/03 2> /dev/null | jq -r 'select(.destinations[][].destination_name == "Quinconces") | .destinations[][] | "\(.destination_name) \(.arrival_theorique) \(.waittime_text)"' | sort | uniq)\n\""
}

alias ls='command ls --color'
alias lh='command ls -d --color .??*'
alias ll='command ls -l -A --color "$@"'

alias grep='grep --color'
alias diff='diff -u --color'
alias ag='ag -a --hidden'

for I in $(seq 2 1 5); do
  ALIAS=$(printf %${I}s | tr ' ' '.')
  DIR=$(printf %$(( ${I} - 1 ))s | sed 's/ /..\//g')
  alias "${ALIAS}"='cd '${DIR}
  unset ALIAS
  unset DIR
done

function mkdir () {
  command mkdir -p -v "$@"
  if [[ $? -eq 0 ]]; then
    for DIR in $(echo "$@"); do
      if [[ "x${DIR}" != x ]]; then
        while [[ ${DIR} != . ]]; do
          echo -n "mkdir: change directory for '$(realpath ${DIR})' ? " \
            && read Y && [[ ${Y,,} == 'y' ]] && cd ${DIR} && break
          DIR=$(dirname ${DIR});
        done
      fi
    done
  fi
}

alias rm='rm -i -r -v'
alias cp='cp -i -r -v'
alias mv='mv -i -v'
alias hh='history | grep -i -E'
alias ff='find . | grep -E'
alias pp='ps -a -x | grep -E'
alias sudo='sudo '
alias api='sudo apt install'
alias app='sudo apt purge'
alias apu='sudo apt-get update && sudo apt-get upgrade '\
\ '&& sudo apt-get autoremove && sudo apt-get autoclean'

function extract () {

  if [[ "$#" -lt 1 ]]; then
    echo "Usage: extract <path/file_name>"\
      ".<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    return 1 #not enough args
  fi

  if [[ ! -e "${1}" ]]; then
    echo -e "File does not exist!"
    return 2 # File not found
  fi

  local DESTDIR="${1}_extracted"
  if [[ -d "${DESTDIR}" ]]; then
    echo -e "${DESTDIR} already exists. Can't extract in a safe destination."
    return 3 # extracted dest already exists
  fi

  command mkdir -p ${DESTDIR}

  local FILE=$(basename "${1}")

  case "${FILE##*.}" in
    tar)
      echo -e "Extracting ${1} to ${DESTDIR}: (uncompressed tar)"
      tar xvf "${1}" -C "${DESTDIR}"
      ;;
    gz)
      echo -e "Extracting ${1} to ${DESTDIR}: (gip compressed tar)"
      tar xvfz "${1}" -C "${DESTDIR}"
    ;;
    tgz)
      echo -e "Extracting ${1} to ${DESTDIR}: (gip compressed tar)"
      tar xvfz "${1}" -C "${DESTDIR}"
      ;;
    xz)
      echo -e "Extracting  ${1} to ${DESTDIR}: (gip compressed tar)"
      tar xvf -J "${1}" -C "${DESTDIR}"
      ;;
    bz2)
      echo -e "Extracting ${1} to ${DESTDIR}: (bzip compressed tar)"
      tar xvfj "${1}" -C "${DESTDIR}"
      ;;
    tbz2)
      echo -e "Extracting ${1} to ${DESTDIR}: (tbz2 compressed tar)"
      tar xvjf "${1}" -C "${DESTDIR}"
      ;;
    zip)
      echo -e "Extracting ${1} to ${DESTDIR}: (zip compressed file)"
      unzip "${1}" -d "${DESTDIR}"
      ;;
    lzma)
      echo -e "Extracting ${1} : (lzma compressed file)"
      unlzma "${1}"
      ;;
    rar)
      echo -e "Extracting ${1} to ${DESTDIR}: (rar compressed file)"
      unrar x "${1}" "${DESTDIR}"
      ;;
    7z)
      echo -e  "Extracting ${1} to ${DESTDIR}: (7zip compressed file)"
      7za e "${1}" -o "${DESTDIR}"
      ;;
    xz)
      echo -e  "Extracting ${1} : (xz compressed file)"
      unxz  "${1}"
      ;;
    exe)
      cabextract "${1}"
      ;;
    *)
      echo -e "Unknown format!"
      return
      ;;
  esac
}

alias vi='vim'
alias vs='vim -S'
alias tx='direnv exec / tmux'
alias ta='tmux attach'
alias tl='tmux list-sessions'
alias tk='tmux kill-server'

git config --global --replace-all alias.ranking "!bash -c \"
function git-ranking () {
  if [[ \${#} -eq 0 ]]; then
    git ls-files \
      | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' \
      | sort -f | uniq -i -c | sort -n -r
  else
    git blame --line-porcelain \$* | sed -n 's/^author //p' | sort -f \
      | uniq -i -c | sort -n -r
  fi
  echo
  github-linguist \$*
}
git-ranking\""

git config --global --replace-all alias.root 'rev-parse --show-toplevel'

git config --global --replace-all alias.file "checkout HEAD -- "

git config --global --replace-all alias.uncommit "reset HEAD^"

git config --global --replace-all alias.unpushed "log --oneline origin/master..master"

alias ga='git add'
alias gaa='git add -A'
alias gam='git add -A && git commit -m'
alias gb='git branch'
alias gd='tig status'
alias gf='git file'
alias gg='git ranking'
alias gh='git checkout'
alias gl='git pull'
alias gm='git commit -m'
alias gm!='git commit --amend'
alias gp='git push'
alias gp!='git unpushed'
alias gr='git root'
alias gs='git status -s -uall'
alias gsd='git stash drop'
alias gsp='git stash pop'
alias gst='git stash push'
alias gu='git uncommit'

function gc () {
  git clone "$@" && cd $(command ls -t | head -n1)
  local RET=$?
  local A=".gitignore"
  local B="${GIT_TEMPLATE_DIR}/.gitignore"
  [[ ${RET} -eq 0 && -f "${GIT_TEMPLATE_DIR}/.gitignore" ]] \
    && echo -e "$(cat ${A} ${B} 2> /dev/null | sort)\n$(cat ${A} \
      2> /dev/null)" | sort | uniq -u | grep -v -E '^[[:space:]]*$' \
        >> .gitignore
  [[ ${RET} -eq 0 && -d "${GIT_TEMPLATE_DIR}/.hooks" ]] \
    && command cp ${GIT_TEMPLATE_DIR}/.hooks/* .git/hooks
}

function gamp () {
  git add -A && git commit -m "$@" && git pull && git push
}

alias ti='tig'
alias tb='tig blame'
alias tg='tig grep'

function f () {
  fff "$@"
  cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
}

alias kl='echo -e "PUBLIC KEYS\n------------------------" && gpg --list-keys && echo -e "------------------------\nSECRET KEYS\n------------------------" && gpg --list-secret-keys'

function kg () {
  gpg --quick-generate-key ${1} default default never
}

alias ipaddr='hostname -I'

alias da="sudo docker container attach"
alias dcl="sudo docker container prune"
alias di="sudo docker image ls"
alias dirm="sudo docker image rm"
alias dls="sudo docker container ls"
alias dr="sudo docker container run"
alias drd="sudo docker container run -d"
alias drt="sudo docker container run -it"
alias ds="sudo docker container start"
