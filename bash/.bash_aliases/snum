#!/bin/bash

alias ls='command ls --color'
alias lh='command ls -d --color .??*'
alias ll='command ls -lA --color "$@" | grep -v -E "^total [0-9]+"'

alias grep='grep --color'

for I in $(seq 2 1 5); do
  ALIAS=$(printf %${I}s | tr ' ' '.')
  DIR=$(printf %$(( ${I} - 1 ))s | sed 's/ /..\//g')
  alias "${ALIAS}"='cd '${DIR}
  unset ALIAS
  unset DIR
done

function mkdir () {
  command mkdir -pv "$@"
  if [ $? -eq 0 ]; then
    for DIR in $(echo "$@"); do
      echo -n "mkdir: change directory for '$(realpath ${DIR})' ? " \
        && read Y && [[ ${Y,,} == 'y' ]] && cd ${DIR} && break
    done
  fi
}

alias rm='rm -iv'
alias cp='cp -iv'
alias mv='mv -iv'
alias hh='history | grep -iE'
alias ff='find . | grep -E'
alias pp='ps -ax | grep -E'
alias sudo='sudo '

function extract () {

  if [[ "$#" -lt 1 ]]; then
    echo "Usage: extract <path/file_name>"\
      ".<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    return 1 #not enough args
  fi

  if [[ ! -e "$1" ]]; then
    echo -e "File does not exist!"
    return 2 # File not found
  fi

  local DESTDIR="$1_extracted"
  if [ -d "${DESTDIR}" ]; then
    echo -e "${DESTDIR} already exists. Can't extract in a safe destination."
    return 3 # extracted dest already exists
  fi

  command mkdir -p ${DESTDIR}

  local FILE=$(basename "$1")

  case "${FILE##*.}" in
    tar)
      echo -e "Extracting $1 to ${DESTDIR}: (uncompressed tar)"
      tar xvf "$1" -C "${DESTDIR}"
      ;;
    gz)
      echo -e "Extracting $1 to ${DESTDIR}: (gip compressed tar)"
      tar xvfz "$1" -C "${DESTDIR}"
    ;;
    tgz)
      echo -e "Extracting $1 to ${DESTDIR}: (gip compressed tar)"
      tar xvfz "$1" -C "${DESTDIR}"
      ;;
    xz)
      echo -e "Extracting  $1 to ${DESTDIR}: (gip compressed tar)"
      tar xvf -J "$1" -C "${DESTDIR}"
      ;;
    bz2)
      echo -e "Extracting $1 to ${DESTDIR}: (bzip compressed tar)"
      tar xvfj "$1" -C "${DESTDIR}"
      ;;
    tbz2)
      echo -e "Extracting $1 to ${DESTDIR}: (tbz2 compressed tar)"
      tar xvjf "$1" -C "${DESTDIR}"
      ;;
    zip)
      echo -e "Extracting $1 to ${DESTDIR}: (zip compressed file)"
      unzip "$1" -d "${DESTDIR}"
      ;;
    lzma)
      echo -e "Extracting $1 : (lzma compressed file)"
      unlzma "$1"
      ;;
    rar)
      echo -e "Extracting $1 to ${DESTDIR}: (rar compressed file)"
      unrar x "$1" "${DESTDIR}"
      ;;
    7z)
      echo -e  "Extracting $1 to ${DESTDIR}: (7zip compressed file)"
      7za e "$1" -o "${DESTDIR}"
      ;;
    xz)
      echo -e  "Extracting $1 : (xz compressed file)"
      unxz  "$1"
      ;;
    exe)
      cabextract "$1"
      ;;
    *)
      echo -e "Unknown format!"
      return
      ;;
  esac
}

alias vi='vim'
alias vs='vim -S'
alias tx='tmux'
alias ta='tmux attach'
alias tl='tmux list-sessions'
alias tk='tmux kill-server'

git config --global --replace-all alias.ranking "!bash -c \"
function git-ranking () {
  if [ \$# -eq 0 ]; then
    git ls-files \
      | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' \
      | sort -f | uniq -ic | sort -nr
  else
    git blame --line-porcelain \$* | sed -n 's/^author //p' | sort -f \
      | uniq -ic | sort -nr
  fi
}
git-ranking\""

git config --global --replace-all alias.root 'rev-parse --show-toplevel'

git config --global --replace-all alias.tree "!bash -c \"
function git-tree () {
  git log --graph --color --abbrev-commit --date=relative \
    --pretty=format:'%Cred%h%Creset %C(cyan)%an%Creset: %s\
%C(yellow)%d%Creset (%cr)' \$* | sed 's/\((.\+\) et\(.\+)\)$/\1,\2/g' \
    | sed 's/\((.\+\) ans\?\(.*)\)$/\1Y\2/g' \
    | sed 's/\((.\+\) mois\(.*)\)$/\1M\2/g' \
    | sed 's/\((.\+\) semaines\?\(.*)\)$/\1W\2/g' \
    | sed 's/\((.\+\) jours\?\(.*)\)$/\1d\2/g' \
    | sed 's/\((.\+\) heures\?\(.*)\)$/\1h\2/g' \
    | sed 's/\((.\+\) minutes\?\(.*)\)$/\1m\2/g' \
    | sed 's/\((.\+\) secondes\?\(.*)\)$/\1s\2/g' \
    | sed 's/(il y a \(.\+\))$/$(tput setaf 2)(\1)$(tput sgr0)/' \
    | less -R -S +g
}
git-tree\""

git config --global --replace-all alias.undo "!bash -c \"
function git-undo () {
  if [ \$(git diff --cached --name-only | wc -l) -gt 0 ]; then
    git reset --mixed
  elif [ \$(git log --pretty=oneline origin/master..master | wc -l) -gt 0 ] \
    && [ \$(git status -s | wc -l) -eq 0 ]; then
      git reset --soft HEAD^
  fi
}
git-undo\""

git config -- global --replace-all alias.file "checkout HEAD -- "

alias ga='git add'
alias gaa='git add -A'
alias gam='git add -A && git commit -m'
alias gb='git branch'
alias gf='git file'
alias gh='git checkout'
alias gk='git ranking'
alias gl='git pull'
alias gm='git commit -m'
alias gm!='git commit --amend'
alias gp='git push'
alias gr='git root'
alias gs='git status -s'
alias gsa='git stash apply'
alias gsp='git stash push'
alias gt='git tree'
alias gu='git undo'

function gc () {
  git clone "$@" && cd $(command ls -t | head -n1)
  local RET=$?
  local A=".gitignore"
  local B="${HOME}/.gitignore"
  [ ${RET} -eq 0 ] && [ -f "${HOME}/.gitignore" ] \
    && echo -e "$(cat ${A} ${B} 2> /dev/null | sort)\n$(cat ${A} \
      2> /dev/null)" | sort | uniq -u | grep -v -E '^[[:space:]]*$' \
        >> .gitignore
}

function gd () {
  git diff --color "$@" | sed "s/^\([^-+ ]*\)[-+ ]/\\1/" | less -R -S +g
}

function gamp () {
  git add -A && git commit -m "$@" && git pull && git push
}
