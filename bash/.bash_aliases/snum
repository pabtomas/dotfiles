#!/bin/bash

function ls () {
  command ls -lA --color "$@" | grep -v -E "^total [0-9]+" \
    | awk "{printf \"%s %s %s\n\", \$9, \$10, \$11}" | less -R +g
}

function ll () {
  command ls -lA --color "$@" | grep -v -E "^total [0-9]+" | less -R +g
}

alias grep='grep --color'

function cd () {

  command cd "$@"

  if [ $? -eq 0 ]; then

    OUT=$(timeout 0.3 bash -c \
\ \ \ 'SZ=0;'\
\ \ \ 'DSZ=$(( (('${LINES}' / 2) * ('${COLUMNS}' / ((('\
\ \ \ '  $(command ls -Ul'\
\ \ \ '    | awk "{printf \"%s %s %s\n\", \$9, \$10, \$11}"'\
\ \ \ '    | wc -L) / 8) + 1) * 8))) + 1 ));'\
\ \ \ 'SZ=$(command ls -U'\
\ \ \ '     | (while read -r file && [ ${SZ} -lt ${DSZ} ]; do'\
\ \ \ '          ((SZ+=1));'\
\ \ \ '        done; echo ${SZ}));'\
\ \ \ 'RESET="$(tput sgr0)";'\
\ \ \ 'if [ ${SZ} -eq 0 ]; then'\
\ \ \ '  COL="$(tput bold)$(tput setaf 6)";'\
\ \ \ '  echo -e "${COL}No regular files found in this directory.${RESET}";'\
\ \ \ 'elif [ ${SZ} -lt ${DSZ} ]; then'\
\ \ \ '  command ls -l --color | tail -n+2'\
\ \ \ '    | awk "{printf \"%s %s %s\n\", \$9, \$10, \$11}";'\
\ \ \ 'else'\
\ \ \ '  COL="$(tput bold)$(tput setaf 3)";'\
\ \ \ '  echo -e "${COL}Huge current directory."'\
\ \ \ \ '"Use listing commands carrefully.${RESET}";'\
\ \ \ 'fi')

    if [ $? -eq 124 ]; then
      local COL="$(tput bold)$(tput setaf 9)"
      local RESET="$(tput sgr0)"
      echo -e "${COL}Timeout occured."\
        "Avoid listing commands in current directory.${RESET}"
      exit 1
    fi

    HID=$(timeout 0.3 bash -c \
\ \ \ 'if [ $(command ls -d .??* 2> /dev/null | wc -m) -gt 0 ]; then'\
\ \ \ ' COL="$(tput bold)$(tput setaf 13)";'\
\ \ \ ' RESET="$(tput sgr0)";'\
\ \ \ ' echo -e "${COL}Hidden file(s) detected.${RESET}";'\
\ \ \ 'fi')

    if [ $? -eq 124 ]; then
      local COL="$(tput bold)$(tput setaf 9)"
      local RESET="$(tput sgr0)"
      echo -e "${COL}Timeout occured."\
        "Avoid listing commands in current directory.${RESET}"
      exit 1
    fi

    [ $(echo "${HID}" | wc -L) -gt 0 ] && echo -e "${HID}"
    echo -e "${OUT}" | column
  fi
}

# marks
__NB_MARKS__=4
alias ???="\???"
alias ????="\????"
eval 'declare -a __MARKS__=( '"$(printf %${__NB_MARKS__}s | sed "s/ /'' /g")"')'
for I in $(seq 1 ${__NB_MARKS__}); do
  eval 'function '$(printf %${I}s | tr ' ' ',')' () { '\
\ \ 'if [ "x${__MARKS__['$(( ${I} - 1 ))']}" == "x" ]; then'\
\ \ '  __MARKS__['$(( ${I} - 1 ))']=$(realpath .);'\
\ \ 'else'\
\ \ '  cd ${__MARKS__['$(( ${I} - 1 ))']};'\
\ \ 'fi;'\
\ \ '}'
done

eval 'declare -a __BIN__=( '"$(printf %${__NB_MARKS__}s \
  | sed "s/ /{0..1}/g")"' )'
__FN__=''
for I in ${__BIN__[@]}; do
  if [ "x$(echo "${I}" | sed "s/0//g")" != "x" ]; then
    I="$(echo "${I}" | sed 's/0/,/g; s/1/?/g')"
    __FN__=${__FN__}"function "${I}" () {"
    for J in $(seq 0 $(( ${#I} - 1 )) ); do
      if [ "${I:${J}:1}" == '?' ]; then
        __FN__=${__FN__}" __MARKS__["${J}"]='';"
      fi
    done
    __FN__=${__FN__}" ?; }; "
  fi
done
eval "${__FN__}"
unset __FN__
unset __BIN__

function ? () {
  for I in $(seq 1 ${__NB_MARKS__}); do
    echo $(printf %${I}s | tr ' ' ',')" = ${__MARKS__[$(( ${I} - 1 ))]}"
  done
}

function ?? () {
  local CONCAT=""
  local BACKUP="${HOME}/.marks_backup"
  if [ "x${1}" != "x" ]; then
    BACKUP="${1}"
  fi
  for MARK in ${__MARKS__[@]}; do
    CONCAT="${CONCAT}x${MARK}"
  done
  if [ "${CONCAT}" == "$(printf %${#__MARKS__}s | tr ' ' 'x')" ]; then
    [ -f "${BACKUP}" ] && readarray -t __MARKS__ < ${BACKUP}
    ? && echo "$(tput setaf 2)Marks restored with:$(tput sgr0) ${BACKUP}"
  else
    echo "${__MARKS__[@]}" | tr ' ' '\n' > "${BACKUP}"
    echo "$(tput setaf 2)Marks saved at:$(tput sgr0) ${BACKUP}"
  fi
}

for I in $(seq 2 1 10); do
  ALIAS=$(printf %${I}s | tr ' ' '.')
  DIR=$(printf %$(( ${I} - 1 ))s | sed "s/ /..\//g")
  alias "${ALIAS}"='cd '${DIR}
  unset ALIAS
  unset DIR
done

function mkdir () {
  command mkdir -pv "$@"
  if [ $? -eq 0 ]; then
    for DIR in $(echo "$@"); do
      echo -n "mkdir: change directory for '$(realpath ${DIR})' ? " \
        && read Y && [[ ${Y,,} == 'y' ]] && cd ${DIR} && break
    done
  fi
}

alias rm='rm -iv'
alias cp='cp -iv'
alias mv='mv -iv'
alias hs='history | grep -iE'
alias f?='find . | grep -E'
alias ps?='ps -ax | grep -E'
alias sudo='sudo '

function extract () {

  if [[ "$#" -lt 1 ]]; then
    echo "Usage: extract <path/file_name>"\
      ".<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    return 1 #not enough args
  fi

  if [[ ! -e "$1" ]]; then
    echo -e "File does not exist!"
    return 2 # File not found
  fi

  local DESTDIR="$1_extracted"
  if [ -d "${DESTDIR}" ]; then
    echo -e "${DESTDIR} already exists. Can't extract in a safe destination."
    return 3 # extracted dest already exists
  fi

  command mkdir -p ${DESTDIR}

  local FILE=$(basename "$1")

  case "${FILE##*.}" in
    tar)
      echo -e "Extracting $1 to ${DESTDIR}: (uncompressed tar)"
      tar xvf "$1" -C "${DESTDIR}"
      ;;
    gz)
      echo -e "Extracting $1 to ${DESTDIR}: (gip compressed tar)"
      tar xvfz "$1" -C "${DESTDIR}"
    ;;
    tgz)
      echo -e "Extracting $1 to ${DESTDIR}: (gip compressed tar)"
      tar xvfz "$1" -C "${DESTDIR}"
      ;;
    xz)
      echo -e "Extracting  $1 to ${DESTDIR}: (gip compressed tar)"
      tar xvf -J "$1" -C "${DESTDIR}"
      ;;
    bz2)
      echo -e "Extracting $1 to ${DESTDIR}: (bzip compressed tar)"
      tar xvfj "$1" -C "${DESTDIR}"
      ;;
    tbz2)
      echo -e "Extracting $1 to ${DESTDIR}: (tbz2 compressed tar)"
      tar xvjf "$1" -C "${DESTDIR}"
      ;;
    zip)
      echo -e "Extracting $1 to ${DESTDIR}: (zip compressed file)"
      unzip "$1" -d "${DESTDIR}"
      ;;
    lzma)
      echo -e "Extracting $1 : (lzma compressed file)"
      unlzma "$1"
      ;;
    rar)
      echo -e "Extracting $1 to ${DESTDIR}: (rar compressed file)"
      unrar x "$1" "${DESTDIR}"
      ;;
    7z)
      echo -e  "Extracting $1 to ${DESTDIR}: (7zip compressed file)"
      7za e "$1" -o "${DESTDIR}"
      ;;
    xz)
      echo -e  "Extracting $1 : (xz compressed file)"
      unxz  "$1"
      ;;
    exe)
      cabextract "$1"
      ;;
    *)
      echo -e "Unknown format!"
      return
      ;;
  esac
}

alias vi='vim'
alias vs='vim -S'
alias tx='tmux'

git config --global --replace-all alias.ranking "!bash -c \"
function git-ranking () {
  if [ \$# -eq 0 ]; then
    git ls-files \
      | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' \
      | sort -f | uniq -ic | sort -nr
  else
    git blame --line-porcelain \$* | sed -n 's/^author //p' | sort -f \
      | uniq -ic | sort -nr
  fi
}
git-ranking\""

git config --global --replace-all alias.root 'rev-parse --show-toplevel'

git config --global --replace-all alias.tree "!bash -c \"
function git-tree () {
  git log --graph --color --abbrev-commit --date=relative \
    --pretty=format:'%Cred%h%Creset %C(cyan)%an%Creset: %s\
%C(yellow)%d%Creset (%cr)' \$* | sed 's/\((.\+\) et\(.\+)\)$/\1,\2/g' \
    | sed 's/\((.\+\) ans\?\(.*)\)$/\1Y\2/g' \
    | sed 's/\((.\+\) mois\(.*)\)$/\1M\2/g' \
    | sed 's/\((.\+\) semaines\?\(.*)\)$/\1W\2/g' \
    | sed 's/\((.\+\) jours\?\(.*)\)$/\1d\2/g' \
    | sed 's/\((.\+\) heures\?\(.*)\)$/\1h\2/g' \
    | sed 's/\((.\+\) minutes\?\(.*)\)$/\1m\2/g' \
    | sed 's/\((.\+\) secondes\?\(.*)\)$/\1s\2/g' \
    | sed 's/(il y a \(.\+\))$/$(tput setaf 2)(\1)$(tput sgr0)/' \
    | less -R -S +g
}
git-tree\""

git config --global --replace-all alias.undo "!bash -c \"
function git-undo () {
  if [ \$(git diff --cached --name-only | wc -l) -gt 0 ]; then
    git reset --mixed
  elif [ \$(git log --pretty=oneline origin/master..master | wc -l) -gt 0 ] \
    && [ \$(git status -s | wc -l) -eq 0 ]; then
      git reset --soft HEAD^
  fi
}
git-undo\""

alias ga='git add'
alias gA='git add -A'
alias gam='git add -A && git commit -m'
alias gb='git branch'
alias gh='git checkout'
alias gk='git ranking'
alias gm='git commit -m'
alias gp='git pull'
alias gP='git push'
alias gr='git root'
alias gs='git status -s'
alias gsa='git stash apply'
alias gsp='git stash push'
alias gt='git tree'
alias gu='git undo'

function gc () {
  git clone "$@" && cd $(command ls -t | head -n1)
}

function gd () {
  git diff --color "$@" | sed "s/^\([^-+ ]*\)[-+ ]/\\1/" | less -R -S +g
}

function gamP () {
  git add -A && git commit -m "$@" && git pull && git push
}
