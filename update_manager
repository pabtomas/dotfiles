#!/usr/bin/env bash

dashed () {
  echo -e "$1 $(printf "%$(( 68 - ${#1} ))s" | tr ' ' '-' )"
}

dots () {
  local -r CLEAR="$(tput ed)"
  local START=$(($(date +%s) + 1))
  while true; do
    printf %$(( (($(date +%s) - ${START}) % 3) + 1 ))s | tr ' ' '.' \
      | xargs -I {} echo -n -e ${CLEAR}"$1 "{}$'\r' && sleep 0.2
  done
}

main () {
  sudo -k && sudo printf "" && local SUDO_START=$(date +%s)

  local -r CLEAR="$(tput ed)"
  local -r GREEN=$(tput setaf 2)
  local -r YELLOW=$(tput setaf 11)
  local -r RED=$(tput setaf 9)
  local -r RESET=$(tput sgr0)
  local -r LOCAL="${HOME}/.local"
  local -r SOURCES="${LOCAL}/sources"
  local -r MANAGER_DIR="$(command cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
  local -r VIMRC="${MANAGER_DIR}/vim/.vimrc"
  local -r TMUXCONF="${MANAGER_DIR}/tmux/.tmux.conf"
  local -r TIGRC="${MANAGER_DIR}/tig/.tigrc"
  local -r BASHRC="${MANAGER_DIR}/bash/.bashrc"
  local -r PROFILE="${MANAGER_DIR}/bash/.bash_profile"
  local -r ALIASES="${MANAGER_DIR}/bash/.bash_aliases/usual"
  local -r GITIGNORE="${MANAGER_DIR}/git/.gitignore"
  local -r HOOKS="${MANAGER_DIR}/git/.hooks"
  local -r SCRIPTS="${MANAGER_DIR}/scripts"
  local -r TPM_DEST="${HOME}/.tmux/plugins/tpm"
  local -r GIT_TEMPLATE_DIR="/usr/share/git-core/templates"
  local -r SCRIPTS_DEST="/opt/scripts"
  local -r POLYGLOT_DEST="${HOME}/.vim/pack/plugins/start/vim-polyglot"
  local GNOME=1
  local DASHED=""
  local DOTS_PID=0
  local STATUS=0
  local VERSION=""
  local TAG=""
  local REBOOT=0

  if [[ $(echo ${PATH} | tr ':' '\n' | grep -E "${LOCAL}/bin" \
    | wc -l) -eq 0 ]]; then
      export PATH=${LOCAL}/bin:${PATH}
  fi

  command mkdir -p ${LOCAL}/bin ${LOCAL}/share ${LOCAL}/lib ${SOURCES}
  sudo \mkdir -p ${SCRIPTS_DEST}

  echo -n -e $(dashed "Checking apt installation")$' '
  if [[ $(which apt | wc -l) -gt 0 ]]; then
    echo -e ${GREEN}"OK"${RESET}
  else
    echo -e ${RED}"Not OK"${RESET} && return 1
  fi

  echo -n -e $(dashed "Checking GNOME installation")$' '
  if [[ $(echo "${XDG_CURRENT_DESKTOP}" | grep -E -i "GNOME" | wc -l) -gt 0 \
    && $(which gnome-shell | wc -l) -gt 0 ]]; then
      echo -e ${GREEN}"OK"${RESET}
  else
    echo -e ${RED}"Not OK"${RESET} && GNOME=0
  fi

  if [[ ${GNOME} -eq 1 ]]; then
    echo -n -e $(dashed "Checking GNOME version")$' '
    if [[ $(echo -e $(gnome-shell --version | sed "s/^[^0-9]\+//")"\n3.30.1" \
      | sort -V | head -n1) == "3.30.1" ]]; then
        echo -e ${GREEN}"OK"${RESET}
    else
      echo -e ${RED}"Not OK"${RESET} \
        && echo -e "\n$(gnome-shell --version)\n" && GNOME=0
    fi
  fi

  echo -n -e $(dashed "Checking bluetooth service")$' '
  if [[ -f /etc/init.d/bluetooth ]]; then
    echo -e ${GREEN}"OK"${RESET}
    DASHED=$(dashed "Disabling bluetooth")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    dots "${DASHED}" &
    DOTS_PID=$!
    sudo systemctl disable bluetooth.service &> /dev/null
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${RED}"Not OK"${RESET}
  fi

  # for BASH scripting
  echo -n -e $(dashed "Checking unbuffer installation")$' '
  if [[ $(which unbuffer | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=$(dashed "Installing expect-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    dots "${DASHED}" &
    DOTS_PID=$!
    sudo apt install -y expect-dev &> /dev/null
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -n -e $(dashed "Checking kisak-mesa ppa")$' '
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  if [[ $(apt policy 2> /dev/null | grep -E "kisak-mesa" \
    | wc -l) -gt 0 ]]; then
      echo -e ${GREEN}"OK"${RESET}
  else
    echo -e ${RED}"Not OK"${RESET}
    sudo add-apt-repository ppa:kisak/kisak-mesa
  fi

  DASHED=${CLEAR}$(dashed "Updating system")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  sudo unbuffer apt update -y | unbuffer -p grep -E -o "[0-9]+%" \
    | xargs -I {} echo -n -e ${DASHED} {}

  if [[ $? -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
  fi

  DASHED=${CLEAR}$(dashed "Upgrading system")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  sudo unbuffer apt upgrade -y | unbuffer -p grep -E -o "[0-9]+%" \
    | xargs -I {} echo -n -e ${DASHED} {}

  if [[ $? -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
  fi

  DASHED=${CLEAR}$(dashed "Removing unused packages")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  sudo unbuffer apt autoremove -y | unbuffer -p grep -E -o "[0-9]+%" \
    | xargs -I {} echo -n -e ${DASHED} {}

  if [[ $? -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
  fi

  echo -n -e $(dashed "Checking GIT installation")$' '
  if [[ $(which git | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing GIT package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y git | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking ca-certificates installation")$' '
  if [[ $(dpkg -l | grep -E "ca-certificates" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing ca-certificates package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y ca-certificates | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking curl installation")$' '
  if [[ $(which curl | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing curl package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y curl | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for password-store
  echo -n -e $(dashed "Checking gnupg installation")$' '
  if [[ $(which gpg | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing gnupg package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y gnupg | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for shellcheck
  echo -n -e $(dashed "Checking cabal installation")$' '
  if [[ $(which cabal | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing cabal package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y cabal-install \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  DASHED=$(dashed "Updating cabal")
  dots "${DASHED}" &
  DOTS_PID=$!
  cabal update &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  # ???
  echo -n -e $(dashed "Checking lsb-release installation")$' '
  if [[ $(dpkg -l | grep -E "lsb-release" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing lsb-release package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y lsb-release \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -n -e $(dashed "Checking docker version")$' '
  if [[ $(which docker | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(docker --version | tr -d 'Docker version ' \
      | grep -E -o "^.*," | tr -d ',')"
    echo -e "\n    docker ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" ]]; then
    DASHED=${CLEAR}$(dashed "Installing docker packages")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
      | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) \
      signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
      https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
      | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo unbuffer apt install -y docker-ce docker-ce-cli containerd.io \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi

    VERSION="$(docker --version | tr -d 'Docker version ' \
      | grep -E -o "^.*," | tr -d ',')"
    echo -e "\n    docker ${VERSION}\n"
  fi

  # for CLI
  echo -n -e $(dashed "Checking jq installation")$' '
  if [[ $(which jq | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing jq package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y jq | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -n -e $(dashed "Checking direnv version")$' '
  if [[ $(which direnv | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(direnv --version | tr -d '\n')"
    echo -e "\n    direnv ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/direnv" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning direnv repository")
    unbuffer git clone https://github.com/direnv/direnv.git ${SOURCES}/direnv \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && return 1
    fi

    pushd ${SOURCES}/direnv &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding direnv repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding direnv repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling direnv repository")
    pushd ${SOURCES}/direnv &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      DASHED=${CLEAR}$(dashed "Installing direnv")
      dots "${DASHED}" &
      DOTS_PID=$!
      curl -s -f -L https://direnv.net/install.sh | bash &> /dev/null \
        && chmod +x $(which direnv)
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(direnv --version | tr -d '\n')"
      echo -e "\n    direnv ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  # for CLI
  echo -n -e $(dashed "Checking Silver Searcher installation")$' '
  if [[ $(which ag | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing silversearcher-ag package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y silversearcher-ag \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -n -e $(dashed "Checking KVM installation")$' '
  if [[ $(which kvm | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    echo -n -e $(dashed "Checking virtualization support")$' '
    if [[ $(grep -E -c '(vmx|svm)' /proc/cpuinfo) -eq 0 ]]; then
      echo -e ${RED}"Not OK"${RESET}
    else
      echo -e ${GREEN}"OK"${RESET}
      echo -n -e $(dashed "")$' '
      DASHED=${CLEAR}$(dashed "Installing KVM packages")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      sudo unbuffer apt install -y cpu-checker qemu-kvm \
        libvirt-daemon-system libvirt-clients bridge-utils \
        | unbuffer -p grep -E -o "[0-9]+%" \
        | xargs -I {} echo -n -e ${DASHED} {}

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
        DASHED=${CLEAR}$(dashed "Adding ${SUDO_USER:-${USER}} to libvirt group")
        [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
          && sudo printf "" && SUDO_START=$(date +%s)
        [[ $(groups | tr ' ' '\n' | grep -E "libvirt" | wc -l) -eq 0 ]] \
          && sudo adduser ${SUDO_USER:-${USER}} libvirt &> /dev/null

        if [[ $? -eq 0 ]]; then
          echo -e ${DASHED} ${GREEN}"OK"${RESET}
        else
          echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
            && dirs -c && return 1
        fi

        DASHED=${CLEAR}$(dashed "Adding ${SUDO_USER:-${USER}} to kvm group")
        [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
          && sudo printf "" && SUDO_START=$(date +%s)
        [[ $(groups | tr ' ' '\n' | grep -E "kvm" | wc -l) -eq 0 ]] \
          && sudo adduser ${SUDO_USER:-${USER}} kvm &> /dev/null

        if [[ $? -eq 0 ]]; then
          echo -e ${DASHED} ${GREEN}"OK"${RESET}
        else
          echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
            && dirs -c && return 1
        fi

      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -n -e $(dashed "Checking Virtual Manager installation")$' '
  if [[ $(which virt-manager | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing Virtual Manager package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y virt-manager \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for VIM, kakoune, TMUX, tig
  echo -n -e $(dashed "Checking libncurses-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libncurses-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libncurses-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libncurses-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libevent-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libevent-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libevent-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libevent-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for VIM, TMUX, Tig
  echo -n -e $(dashed "Checking gcc installation")$' '
  if [[ $(which gcc | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing build-essential package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y build-essential \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -e "\n    $(gcc --version | head -n 1)"
  echo -e "    $(g++ --version | head -n 1)\n"

  echo -n -e $(dashed "Checking if gcc and g++ version are >= 10")$' '
  if [[ $(gcc --version | head -n 1 | sed -e 's/\(\.[0-9]\+\)\{2\}$//g' \
    | grep -E -o "[0-9]+$") -lt 10 || $(g++ --version | head -n 1 \
    | sed -e 's/\(\.[0-9]\+\)\{2\}$//g' \
    | grep -E -o "[0-9]+$") -lt 10 ]]; then
      echo -e ${RED}"Not OK"${RESET}

      DASHED=${CLEAR}$(dashed "Installing gcc 10 packages")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      sudo unbuffer apt install -y gcc-10 gcc-10-base gcc-10-doc \
        | unbuffer -p grep -E -o "[0-9]+%" \
        | xargs -I {} echo -n -e ${DASHED} {}

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=${CLEAR}$(dashed "Installing g++ 10 package")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      sudo unbuffer apt install -y g++-10 \
        | unbuffer -p grep -E -o "[0-9]+%" \
        | xargs -I {} echo -n -e ${DASHED} {}

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=${CLEAR}$(dashed "Installing libc++ packages")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      sudo unbuffer apt install -y libstdc++-10-dev libstdc++-10-doc \
        | unbuffer -p grep -E -o "[0-9]+%" \
        | xargs -I {} echo -n -e ${DASHED} {}

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=${CLEAR}$(dashed "Adding symbolic link to gcc 10")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      sudo ln -fs $(which gcc-10) $(which gcc)

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=${CLEAR}$(dashed "Adding symbolic link to g++ 10")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      sudo ln -fs $(which g++-10) $(which g++)

      if [[ $? -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -e "\n    $(gcc --version | head -n 1)"
  echo -e "    $(g++ --version | head -n 1)\n"

  # ???
  echo -n -e $(dashed "Checking yacc installation")$' '
  if [[ $(which yacc | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing bison package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y bison | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking make installation")$' '
  if [[ $(which make | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing make package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y make | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking autoconf installation")$' '
  if [[ $(which "autoconf" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing autoconf package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y autoconf | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking automake installation")$' '
  if [[ $(which "automake" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing automake package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y automake | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # To compile man pages
  echo -n -e $(dashed "Checking asciidoc installation")$' '
  if [[ $(which asciidoc | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing asciidoc package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y asciidoc | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking pkg-config installation")$' '
  if [[ $(dpkg -l | grep -E "pkg-config" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing pkg-config package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y pkg-config \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking python3-docutils installation")$' '
  if [[ $(dpkg -l | grep -E "python3-docutils" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing python3-docutils package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y python3-docutils \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libseccomp-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libseccomp-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libseccomp-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libseccomp-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libjansson-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libjansson-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libjansson-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libjansson-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for ctags
  echo -n -e $(dashed "Checking libyaml-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libyaml-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libyaml-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libyaml-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for ctags
  echo -n -e $(dashed "Checking libxml2-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libxml2-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libxml2-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libxml2-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libxt-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libxt-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libxt-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libxt-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libgtk-3-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libgtk-3-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libgtk-3-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libgtk-3-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for .tmux.conf
  echo -n -e $(dashed "Checking xsel installation")$' '
  if [[ $(which xsel | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing xsel package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y xsel | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking cmake installation")$' '
  if [[ $(which cmake | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing cmake package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y cmake \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libicu-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libicu-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libicu-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libicu-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking zlib1g-dev installation")$' '
  if [[ $(dpkg -l | grep -E "zlib1g-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing zlib1g-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y zlib1g-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libcurl4-openssl-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libcurl4-openssl-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libcurl4-openssl-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libcurl4-openssl-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # ???
  echo -n -e $(dashed "Checking libssl-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libssl-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libssl-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libssl-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for linguist
  echo -n -e $(dashed "Checking ruby-dev installation")$' '
  if [[ $(dpkg -l | grep -E "ruby-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing ruby-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y ruby-dev \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for spaceporn
  echo -n -e $(dashed "Checking libpng-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libpng-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libpng-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libpng-dev \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for spaceporn
  echo -n -e $(dashed "Checking libsystemd-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libsystemd-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libsystemd-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libsystemd-dev \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for spaceporn
  echo -n -e $(dashed "Checking libglew-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libglew-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libglew-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libglew-dev \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for spaceporn
  echo -n -e $(dashed "Checking libX11-dev installation")$' '
  if [[ $(dpkg -l | grep -E "libx11-dev" | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing libX11-dev package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y libx11-dev \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  # for CLI
  echo -n -e $(dashed "Checking redshift installation")$' '
  if [[ $(which redshift | wc -l) -eq 0 ]]; then
    echo -e ${RED}"Not OK"${RESET}
    DASHED=${CLEAR}$(dashed "Installing redshift package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    sudo unbuffer apt install -y redshift \
      | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi
  else
    echo -e ${GREEN}"OK"${RESET}
  fi

  echo -n -e $(dashed "Checking VIM version")$' '
  if [[ $(which vim | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(echo $(vim --version | head -n 2 | grep -E -o \
      ' [0-9]+\.[0-9]+ |[0-9]+$') | tr ' ' '.')"
    echo -e "\n    vim ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/vim" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning VIM repository")
    unbuffer git clone https://github.com/vim/vim.git ${SOURCES}/vim \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/vim &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding VIM repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding VIM repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling VIM repository")
    pushd ${SOURCES}/vim &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null \
          && pushd ${SOURCES}/vim/src &> /dev/null

      DASHED=$(dashed "Configuring VIM")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      ${SOURCES}/vim/src/configure &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Compiling VIM")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Installing VIM")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sudo make install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(echo $(vim --version | head -n 2 | grep -E -o \
        ' [0-9]+\.[0-9]+ |[0-9]+$') | tr ' ' '.')"
      echo -e "\n    vim ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking Kakoune version")$' '
  if [[ $(which kak | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(kak -version | grep -E -o '[0-9.]+')"
    echo -e "\n    kak ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/kak" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning Kakoune repository")
    unbuffer git clone https://github.com/mawww/kakoune.git ${SOURCES}/kak \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/kak &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding Kakoune repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding Kakoune repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling Kakoune repository")
    pushd ${SOURCES}/kak &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null \
          && pushd ${SOURCES}/kak/src &> /dev/null

      DASHED=$(dashed "Compiling Kakoune")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Installing Kakoune")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      PREFIX=${LOCAL} make install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(kak -version | grep -E -o '[0-9.]+')"
      echo -e "\n    kak ${VERSION}\n"

      DASHED=$(dashed "Documenting Kakoune")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make man &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking Tig version")$' '
  if [[ $(which tig | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(tig --version | head -n 1 | grep -E -o "[0-9.]+")"
    echo -e "\n    tig ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/tig" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning Tig repository")
    unbuffer git clone https://github.com/jonas/tig.git ${SOURCES}/tig \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/tig &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding Tig repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding Tig repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling Tig repository")
    pushd ${SOURCES}/tig &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null

      DASHED=$(dashed "Compiling Tig")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make prefix=${LOCAL} &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Installing tig")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make install prefix=${LOCAL} &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(tig --version | head -n 1 | grep -E -o "[0-9.]+")"
      echo -e "\n    tig ${VERSION}\n"

      DASHED=$(dashed "Documenting Tig")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sudo make install-doc-man prefix=/usr &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking shellcheck version")$' '
  if [[ $(which shellcheck | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(shellcheck -V | grep -oP '(?<=version: )[[:digit:].]+$')"
    echo -e "\n    shellcheck ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/shellcheck" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning shellcheck repository")
    unbuffer git clone https://github.com/koalaman/shellcheck ${SOURCES}/shellcheck \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/shellcheck &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding shellcheck repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding shellcheck repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling shellcheck repository")
    pushd ${SOURCES}/shellcheck &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null

      DASHED=$(dashed "Installing shellcheck")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      cabal install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(${HOME}/.cabal/bin/shellcheck -V | grep -oP '(?<=version: )[[:digit:].]+$')"
      echo -e "\n    shellcheck ${VERSION}\n"

  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking Universal Ctags version")$' '
  if [[ $(which ctags | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(ctags --version | grep -m1 -E -o "|\(p[.0-9]+\)" \
      | grep -E -o "[.0-9]+")"
    echo -e "\n    ctags ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/ctags" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning Universal Ctags repository")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    unbuffer git clone https://github.com/universal-ctags/ctags.git \
      ${SOURCES}/ctags | unbuffer -p grep -E -o "[0-9]+%" \
        | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/ctags &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding Universal Ctags repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Pulling Universal Ctags repository")
    pushd ${SOURCES}/ctags &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Adding Universal Ctags repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null

      DASHED=$(dashed "Configuring Universal Ctags")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sh ${SOURCES}/ctags/autogen.sh &> /dev/null \
        && ${SOURCES}/ctags/configure &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Compiling Universal Ctags")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Installing Universal Ctags")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sudo make install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(ctags --version | grep -m1 -E -o "|\(p[.0-9]+\)" \
        | grep -E -o "[.0-9]+")"
      echo -e "\n    ctags ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking fff version")$' '
  if [[ $(which fff | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(fff -v | grep -E -o '[0-9.]+')"
    echo -e "\n    fff ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/fff" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning fff repository")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    unbuffer git clone https://github.com/dylanaraps/fff ${SOURCES}/fff \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/fff &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding fff repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Pulling fff repository")
    pushd ${SOURCES}/fff &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Adding fff repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o '[0-9.]+')

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      DASHED=$(dashed "Installing fff")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make PREFIX=${LOCAL} install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(fff -v | grep -E -o '[0-9.]+')"
      echo -e "\n    fff ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking TMUX version")$' '
  if [[ $(which tmux | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(tmux -V | tr -d 'tmux ')"
    echo -e "\n    tmux ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/tmux" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning TMUX repository")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    unbuffer git clone https://github.com/tmux/tmux.git ${SOURCES}/tmux \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/tmux &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding TMUX repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding TMUX repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling TMUX repository")
    pushd ${SOURCES}/tmux &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1))

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null

      DASHED=$(dashed "Configuring TMUX")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sh ${SOURCES}/tmux/autogen.sh &> /dev/null \
        && ${SOURCES}/tmux/configure &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Compiling TMUX")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      make &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      DASHED=$(dashed "Installing TMUX")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sudo make install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(tmux -V | tr -d 'tmux ')"
      echo -e "\n    tmux ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking password-store version")$' '
  if [[ $(which pass | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(pass version | grep -E -o 'v[0-9.]*' | tr -d 'v')"
    echo -e "\n    pass ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ "${VERSION}" == "0" || ! -d "${SOURCES}/pass" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning password-store repository")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    unbuffer git clone https://git.zx2c4.com/password-store ${SOURCES}/pass \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/pass &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding password-store repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding password-store repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling password-store repository")
    pushd ${SOURCES}/pass &> /dev/null && git checkout master &> /dev/null \
      && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1))

  if [[ "${VERSION}" == "0" || $(echo "${VERSION}" | grep -E -x "${TAG}" \
    | wc -l) -eq 0 ]]; then
      echo -e "\n    tag ${TAG} != version ${VERSION}\n"

      git checkout tags/$(git describe --tags \
        $(git rev-list --tags --max-count=1)) &> /dev/null

      DASHED=$(dashed "Installing password-store")
      [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
        && sudo printf "" && SUDO_START=$(date +%s)
      dots "${DASHED}" &
      DOTS_PID=$!
      sudo make install &> /dev/null
      STATUS=$?

      kill ${DOTS_PID} &> /dev/null
      wait ${DOTS_PID} &> /dev/null
      DASHED=${CLEAR}${DASHED}

      if [[ ${STATUS} -eq 0 ]]; then
        echo -e ${DASHED} ${GREEN}"OK"${RESET}
      else
        echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
          && dirs -c && return 1
      fi

      VERSION="$(pass version | grep -E -o 'v[0-9.]*' | tr -d 'v')"
      echo -e "\n    pass ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  echo -n -e $(dashed "Checking linguist GEM package")$' '
  if [[ $(which github-linguist | wc -l) -eq 1 ]]; then
    echo -e ${GREEN}"OK"${RESET}
    VERSION="$(github-linguist --help | head -n 1 | grep -E -o "[0-9.]*")"
    echo -e "\n    linguist ${VERSION}\n"
  else
    echo -e ${RED}"Not OK"${RESET}
    VERSION="0"
  fi

  if [[ ! -d "${SOURCES}/linguist" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning linguist repository")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    unbuffer git clone https://github.com/github/linguist ${SOURCES}/linguist \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    pushd ${SOURCES}/linguist &> /dev/null

    DASHED=${CLEAR}$(dashed "Adding linguist repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Adding linguist repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Pulling linguist repository")
    pushd ${SOURCES}/linguist &> /dev/null \
      && git checkout master &> /dev/null && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  TAG=$(git describe --tags $(git rev-list --tags --max-count=1) \
    | grep -E -o "[0-9.]*")

  if [[ "${VERSION}" == "0" ]]; then
    echo -e "\n    tag ${TAG} != version ${VERSION}\n"
    DASHED=${CLEAR}$(dashed "Installing linguist GEM package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    dots "${DASHED}" &
    DOTS_PID=$!
    sudo gem install github-linguist &> /dev/null
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    VERSION="$(github-linguist --help | head -n 1 | grep -E -o "[0-9.]*")"
    echo -e "\n    linguist ${VERSION}\n"

  elif [[ $(echo "${VERSION}" | grep -E -x "${TAG}" | wc -l) -eq 0 ]]; then

    echo -e "\n    tag ${TAG} != version ${VERSION}\n"
    DASHED=${CLEAR}$(dashed "Updating linguist GEM package")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    dots "${DASHED}" &
    DOTS_PID=$!
    sudo gem update github-linguist &> /dev/null
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    VERSION="$(github-linguist --help | head -n 1 | grep -E -o "[0-9.]*")"
    echo -e "\n    linguist ${VERSION}\n"
  else
    echo -e "\n    tag ${TAG} == version ${VERSION}\n"
  fi

  pushd ${MANAGER_DIR} &> /dev/null

  if [[ ! -d "${TPM_DEST}" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning TMUX Plugin Manager repository")
    unbuffer git clone https://github.com/tmux-plugins/tpm ${TPM_DEST} \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Pulling TMUX Plugin Manager repository")
    pushd ${TPM_DEST} &> /dev/null && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  if [[ ! -d "${SOURCES}/flagbox" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning flagbox repository")
    unbuffer git clone https://github.com/pabtomas/flagbox ${SOURCES}/flagbox \
      | unbuffer -p grep -E -o "[0-9]+%" | xargs -I {} echo -n -e ${DASHED} {}

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Adding flagbox repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Pulling flagbox repository")
    pushd ${SOURCES}/flagbox &> /dev/null && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi

    DASHED=${CLEAR}$(dashed "Adding flagbox repository as a GIT safe directory")
    sudo find ${SOURCES} -name '.git' -type d \
      -exec bash -c 'git config --global --add safe.directory ${0%/.git}' {} \;
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  DASHED=$(dashed "Installing flagbox")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  dots "${DASHED}" &
  DOTS_PID=$!
  pushd ${SOURCES}/flagbox &> /dev/null \
    && sudo \cp -f ${SOURCES}/flagbox/sourceme.sh ${SCRIPTS_DEST} &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying .vimrc")
  dots "${DASHED}" &
  DOTS_PID=$!
  command cp ${VIMRC} ${HOME} &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  if [[ ! -d "${POLYGLOT_DEST}" ]]; then
    DASHED=${CLEAR}$(dashed "Cloning vim-polyglot repository")
    unbuffer git clone --depth 1 https://github.com/sheerun/vim-polyglot
      ${POLYGLOT_DEST} | unbuffer -p grep -E -o "[0-9]+%" \
      | xargs -I {} echo -n -e ${DASHED} {}
    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  else
    DASHED=${CLEAR}$(dashed "Pulling vim-polyglot repository")
    pushd ${POLYGLOT_DEST} &> /dev/null && git pull &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
        && dirs -c && return 1
    fi
  fi

  DASHED=$(dashed "Copying .tmux.conf")
  dots "${DASHED}" &
  DOTS_PID=$!
  command cp ${TMUXCONF} ${HOME} &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Installing TMUX Plugins")
  dots "${DASHED}" &
  DOTS_PID=$!
  ${TPM_DEST}/bin/install_plugins &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying .tigrc")
  dots "${DASHED}" &
  DOTS_PID=$!
  command cp ${TIGRC} ${HOME} &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying .bashrc")
  dots "${DASHED}" &
  DOTS_PID=$!
  command cp /etc/skel/.bashrc ${HOME} &> /dev/null \
    && echo -e "\n$(cat ${BASHRC})" >> ${HOME}/.bashrc
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying .bash_profile")
  dots "${DASHED}" &
  DOTS_PID=$!
  command cp /etc/skel/.profile ${HOME}/.bash_profile &> /dev/null \
    && echo -e "\n$(cat ${PROFILE})" >> ${HOME}/.bash_profile
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying .bash_aliases")
  dots "${DASHED}" &
  DOTS_PID=$!
  command cp ${ALIASES} ${HOME}/.bash_aliases &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying .gitignore")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  dots "${DASHED}" &
  DOTS_PID=$!
  sudo \cp ${GITIGNORE} ${GIT_TEMPLATE_DIR} &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Copying GIT hooks")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  dots "${DASHED}" &
  DOTS_PID=$!
  sudo \cp -r ${HOOKS} ${GIT_TEMPLATE_DIR} &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  if [[ ${GNOME} -eq 1 ]]; then

    DASHED=$(dashed "Copying scripts")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    dots "${DASHED}" &
    DOTS_PID=$!
    for SCRIPT in $(command ls ${SCRIPTS}); do
      sudo \cp ${SCRIPTS}/${SCRIPT} ${SCRIPTS_DEST} &> /dev/null
    done
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi

    DASHED=$(dashed "Copying crons")
    [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
      && sudo printf "" && SUDO_START=$(date +%s)
    dots "${DASHED}" &
    DOTS_PID=$!
    [[ $(which crontab | wc -l) -eq 1 ]] && echo "* * * * * env DISPLAY=:0.0\
 sh ${SCRIPTS_DEST}/redshift.sh > /dev/null 2>&1" | crontab - &> /dev/null
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi

    DASHED=$(dashed "Enabling GNOME extensions")
    dots "${DASHED}" &
    DOTS_PID=$!
    gsettings set org.gnome.shell disable-user-extensions false &> /dev/null
    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET} \
        && pushd -0 &> /dev/null && dirs -c && return 1
    fi

    DASHED=$(dashed "Hidding desktop icons")
    dots "${DASHED}" &
    DOTS_PID=$!
    gsettings set org.gnome.desktop.background show-desktop-icons false \
      &> /dev/null

    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET}
    fi

    if [[ $(gnome-extensions list | grep -E "desktop-icons" | wc -l) -eq 1 ]];
      then
        DASHED=$(dashed "Disabling desktop-icons extension")
        dots "${DASHED}" &
        DOTS_PID=$!
        gsettings set org.gnome.shell.extensions.desktop-icons show-home \
          false &> /dev/null && gsettings set \
            org.gnome.shell.extensions.desktop-icons show-trash false \
              &> /dev/null && gnome-extensions disable desktop-icons@csoriano \
                &> /dev/null
        STATUS=$?

        kill ${DOTS_PID} &> /dev/null
        wait ${DOTS_PID} &> /dev/null
        DASHED=${CLEAR}${DASHED}

        if [[ ${STATUS} -eq 0 ]]; then
          echo -e ${DASHED} ${GREEN}"OK"${RESET}
        else
          echo -e ${DASHED} ${RED}"Not OK"${RESET}
        fi
    fi

    DASHED=$(dashed "Setting GNOME Interface")
    dots "${DASHED}" &
    DOTS_PID=$!
    gsettings set org.gnome.desktop.interface show-battery-percentage true \
      &> /dev/null && [[ -f /etc/X11/cursors/redglass.theme ]] \
      && gsettings set org.gnome.desktop.interface cursor-theme 'redglass' \
        &> /dev/null && [[ -d /usr/share/icons/HighContrast ]] \
      && gsettings set org.gnome.desktop.interface gtk-theme \
        'HighContrastInverse' &> /dev/null

    STATUS=$?

    kill ${DOTS_PID} &> /dev/null
    wait ${DOTS_PID} &> /dev/null
    DASHED=${CLEAR}${DASHED}

    if [[ ${STATUS} -eq 0 ]]; then
      echo -e ${DASHED} ${GREEN}"OK"${RESET}
    else
      echo -e ${DASHED} ${RED}"Not OK"${RESET}
    fi

    DASHED=$(dashed "Restarting GNOME")
    echo -n -e "${DASHED}"$' '
    killall -3 gnome-shell &> /dev/null

    if [[ $? -eq 0 ]]; then
      echo -n -e ${GREEN}"OK"${RESET}\
        "\n\n    Press Enter when GNOME service is functional again " \
          && read && echo
    else
      echo -e ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null && dirs -c \
        && return 1
    fi
  fi

  DASHED=$(dashed "Sourcing .bash_profile")
  dots "${DASHED}" &
  DOTS_PID=$!
  source ${HOME}/.bash_profile &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  DASHED=$(dashed "Reloading CRON service")
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  dots "${DASHED}" &
  DOTS_PID=$!
  sudo service cron reload &> /dev/null
  STATUS=$?

  kill ${DOTS_PID} &> /dev/null
  wait ${DOTS_PID} &> /dev/null
  DASHED=${CLEAR}${DASHED}

  if [[ ${STATUS} -eq 0 ]]; then
    echo -e ${DASHED} ${GREEN}"OK"${RESET}
  else
    echo -e ${DASHED} ${RED}"Not OK"${RESET} && pushd -0 &> /dev/null \
      && dirs -c && return 1
  fi

  echo -n -e $(dashed "Checking Crocus driver usage")$' '
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  if [[ $(sudo cat /etc/environment \
    | grep -E "MESA_LOADER_DRIVER_OVERRIDE=crocus" | wc -l ) -eq 1 ]]; then
      echo -e ${GREEN}"OK"${RESET}
  else
    echo -e ${RED}"Not OK"${RESET}
    sudo bash -c "echo 'MESA_LOADER_DRIVER_OVERRIDE=crocus' >> /etc/environment"
    REBOOT=1
  fi

  echo -n -e $(dashed "Checking DRI3 usage")$' '
  [[ $(( $(date +%s) - ${SUDO_START} )) -gt 290 ]] && sudo -k \
    && sudo printf "" && SUDO_START=$(date +%s)
  if [[ -f /etc/X11/xorg.conf.d/20-intel.conf && \
    $(sudo cat /etc/X11/xorg.conf.d/20-intel.conf | grep -E "DRI" \
    | grep -E "3" | wc -l ) -eq 1 ]]; then
      echo -e ${GREEN}"OK"${RESET}
  else
    echo -e ${RED}"Not OK"${RESET}
    sudo mkdir -p /etc/X11/xorg.conf.d && sudo bash -c \
      "echo -e 'Section \"Device\"\n   Identifier  \"Intel Graphics\"\n   Driver      \"intel\"\n   Option      \"DRI\"    \"3\"\nEndSection' >> /etc/X11/xorg.conf.d/20-intel.conf"
    REBOOT=1
  fi

  [[ ${REBOOT} -gt 0 ]] \
    && echo -e "${YELLOW}Some configuration files have been modified and need a reboot to be used${RESET}"

  pushd -0 &> /dev/null && dirs -c
}

(return 0 2> /dev/null)
[[ $? -ne 0 ]] && echo "This script has to be sourced." && exit 1
main
unset -f dots dashed main
