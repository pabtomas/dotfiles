name: ci

on:
  pull_request:
    branches:
      - trunk

jobs:
  wget_me:
    strategy:
      matrix:
        pkg:
        - bash
        - busybox
        - dash
        - ksh93u+m
        - loksh
        - mksh
        - oksh
        - yash
        - zsh
    runs-on: ubuntu-latest
    steps:
    - name: check wget_me.sh
      env:
        PKG: ${{ matrix.pkg }}
      shell: bash
      run: |
        set -eux
        tmp="$(mktemp '/tmp/tmp.XXXXXXXXXX.sh')"
        wget -q -O "${tmp}" "https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${GITHUB_HEAD_REF}/wget_me.sh"
        chmod 0700 "${tmp}"
        sudo apt-get update -y
        case "${PKG}" in
        ( 'busybox'|'loksh'|'oksh'|'yash'|'zsh' )
          sudo install -d -m755 -o "$(id -u)" -g "$(id -g)" /nix
          curl -L https://nixos.org/nix/install | sh
          source "${HOME}/.nix-profile/etc/profile.d/nix.sh"
          nix-env -i "${PKG}" ;;
        ( * ) dpkg -s "${PKG}" > /dev/null 2>&1 || sudo apt-get install -y "${PKG}" ;;
        esac
        case "${PKG}" in
        ( 'bash' ) EXE="${PKG} --posix" ;;
        ( 'busybox' ) EXE="${PKG} sh" ;;
        ( 'ksh93u+m' ) EXE='ksh93' ;;
        ( 'zsh' ) EXE="${PKG} --emulate sh" ;;
        ( * ) EXE="${PKG}" ;;
        esac
        sudo apt-get install xserver-xorg-core xvfb awesome -y
        DISPLAY=':0'
        export DISPLAY
        Xvfb "${DISPLAY}" &
        ${EXE} -x ${tmp} --branch ${GITHUB_HEAD_REF} --runner-is-a-bot
  shellcheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: shellcheck
      shell: bash
      run: |
        shellcheck --severity style --external-sources ./env.sh --external-sources ./env.d/*.sh wget_me.sh
  canonical_compose:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: config
      shell: bash
      run: |
        set -eux -- "${GITHUB_WORKSPACE}"
        API_TAG="$(docker version --format '{{ .Server.APIVersion }}')"
        XEPHYR_DISPLAY='0'
        export API_TAG XEPHYR_DISPLAY
        source "${GITHUB_WORKSPACE}/env.sh"
        extensions_yaml="${GITHUB_WORKSPACE}/extensions.yaml"
        extensions_in="${extensions_yaml}.in"
        eval "printf '%s\n' \"$(cat "${extensions_in}")\"" > "${extensions%.*}"
        for compose_in in $(find "${GITHUB_WORKSPACE}" -type f -name compose.yaml.in)
        do
          compose_yaml="${compose_in%.*}"
          # Resolve shell substitution
          eval "printf '%s\n' \"$(cat "${compose_in}")\"" > "${compose_yaml}"
          # Resolve anchors & aliases
          compose_content="$(cat "${extensions_yaml}" "${compose_yaml}" | yq 'explode(.)')"
          printf '%s\n' "${compose_content}" > "${compose_yaml}"
          canonical_compose="${compose_yaml}.canonical"
          docker compose --file "${compose_yaml}" config > "${canonical_compose}"
          diff -u "${compose_yaml}" "${canonical_compose}" || :
        done
