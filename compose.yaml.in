name: ${COMPOSE_PROJECT_NAME}
services:
  ${BUILDER_SERVICE}:
    build:
      context: ${CWD_PATH}/${BUILDER_ID}
      dockerfile: Dockerfile
      args:
        _BUILDKIT_LOCAL_IMG: ${_BUILDKIT_LOCAL_IMG}
        BUILDER_PORT: "\"${BUILDER_PORT}\""
    command:
      - --addr
      - tcp://0.0.0.0:${BUILDER_PORT}
      - --oci-worker-no-process-sandbox
    container_name: ${BUILDER_HOST}
    image: ${BUILDER_IMG}
    networks:
      ${BUILDER_NET}: null
    security_opt:
      - apparmor:unconfined
      - seccomp:unconfined
  ${COLLECTOR_SERVICE}:
    build:
      context: ${CWD_PATH}/${COLLECTOR_ID}
      dockerfile: Dockerfile
      args:
        APK_PATHS: ${APK_PATHS}
        COMPLETION_PATH: ${COMPLETION_PATH}
        CRON_LOG_PATH: ${CRON_LOG_PATH}
        CRONTABS_PATH: ${CRONTABS_PATH}
        DATA_PATH: ${DATA_PATH}
        ENTRYPOINT_COMPONENT_IMG: ${ENTRYPOINT_COMPONENT_IMG}
        ENTRYPOINTD_PATH: ${ENTRYPOINTD_PATH}
        HTTP_DOCKER_HOST: ${HTTP_DOCKER_HOST}
        HTTP_PROXY: ${http_proxy:-${HTTP_PROXY:-null}}
        HTTPS_PROXY: ${https_proxy:-${HTTPS_PROXY:-null}}
        NET: ${JUMP_AREA_NET}
        OPT_SCRIPTS_PATH: ${OPT_SCRIPTS_PATH}
        PROXY_ID: ${PROXY_ID}
    container_name: ${COLLECTOR_HOST}
    depends_on:
      ${CONTROLLER_SERVICE}:
        condition: service_started
        required: true
      ${EDITOR_SERVICE}:
        condition: service_started
        required: true
      ${SHELL_EXPLORER_SERVICE}:
        condition: service_started
        required: true
      ${ZIG_EXPLORER_SERVICE}:
        condition: service_started
        required: true
      ${PROXY_SERVICE}:
        condition: service_started
        required: true
      ${SAFEDEPOSIT_SERVICE}:
        condition: service_started
        required: true
      ${SCHOLAR_SERVICE}:
        condition: service_started
        required: true
    hostname: ${COLLECTOR_HOST}
    image: ${COLLECTOR_IMG}
    networks:
      ${PROXIFIED_SOCKET_NET}:
        ipv4_address: ${COLLECTOR_IP}
    read_only: true
    volumes:
      - type: volume
        source: ${COLLECTOR_ETC_CRONTABS_VOLUME}
        target: ${CRONTABS_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${COLLECTOR_OPT_DATA_VOLUME}
        target: ${DATA_PATH}
        volume: {}
      - type: volume
        source: ${COLLECTOR_OPT_SCRIPTS_VOLUME}
        target: ${OPT_SCRIPTS_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${COLLECTOR_VAR_LOG_VOLUME}
        target: ${VAR_LOG_PATH}
        volume: {}
  ${CONTROLLER_SERVICE}:
    container_name: ${CONTROLLER_HOST}
    depends_on:
      ${BUILDER_SERVICE}:
        condition: service_started
        required: true
      ${PROXY_SERVICE}:
        condition: service_started
        required: true
    hostname: ${CONTROLLER_HOST}
    image: ${_DOCKER_COMPONENT_IMG}
    networks:
      ${BUILDER_NET}: null
      ${JUMP_AREA_NET}: null
      ${PROXIFIED_SOCKET_NET}:
        ipv4_address: ${CONTROLLER_IP}
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${SSH_ROOT_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${MYWHALEFLEET_VOLUME}
        target: ${MYWHALEFLEET_PATH}
        volume: {}
  ${EDITOR_SERVICE}:
    container_name: ${EDITOR_HOST}
    hostname: ${EDITOR_HOST}
    image: ${VIM_COMPONENT_IMG}
    networks:
      ${JUMP_AREA_NET}: null
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${SSH_ROOT_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${MYWHALEFLEET_VOLUME}
        target: ${MYWHALEFLEET_PATH}
        volume: {}
      - type: volume
        source: ${SPACEPORN_VOLUME}
        target: ${SPACEPORN_PATH}
        volume: {}
  ${SHELL_EXPLORER_SERVICE}:
    container_name: ${SHELL_EXPLORER_HOST}
    hostname: ${SHELL_EXPLORER_HOST}
    image: ${SHELL_COMPONENT_IMG}
    networks:
      ${JUMP_AREA_NET}: null
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${SSH_ROOT_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${MYWHALEFLEET_VOLUME}
        target: ${MYWHALEFLEET_PATH}
        volume: {}
  ${ZIG_EXPLORER_SERVICE}:
    container_name: ${ZIG_EXPLORER_HOST}
    hostname: ${ZIG_EXPLORER_HOST}
    image: ${ZIG_COMPONENT_IMG}
    networks:
      ${JUMP_AREA_NET}: null
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${SSH_ROOT_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${SPACEPORN_VOLUME}
        target: ${SPACEPORN_PATH}
        volume: {}
  ${JUMPER_SERVICE}:
    build:
      context: ${CWD_PATH}/${JUMPER_ID}
      dockerfile: Dockerfile
      args:
        BASH_COMPLETION_PATH: ${BASH_COMPLETION_PATH}
        COMPLETION_PATH: /opt/${COLLECTOR_ID}${COMPLETION_PATH}
        CONTROLLER_ID: ${CONTROLLER_ID}
        ENTRYPOINTD_PATH: ${ENTRYPOINTD_PATH}
        HOSTNAME: ${JUMPER_ID}
        HTTP_PROXY: ${http_proxy:-${HTTP_PROXY:-null}}
        HTTPS_PROXY: ${https_proxy:-${HTTPS_PROXY:-null}}
        NET_PFX: ${JUMP_AREA_PFX}
        OPT_SCRIPTS_PATH: ${OPT_SCRIPTS_PATH}
        OPT_SSH_PATH: ${OPT_SSH_PATH}
        SSH_ROOT_PATH: ${SSH_ROOT_PATH}
        TCP_DOCKER_HOST: ${TCP_DOCKER_HOST}
        TMUX_COMPONENT_IMG: ${TMUX_COMPONENT_IMG}
    container_name: ${JUMPER_HOST}
    depends_on:
      ${COLLECTOR_SERVICE}:
        condition: service_started
        required: true
    hostname: ${JUMPER_HOST}
    image: ${JUMPER_IMG}
    networks:
      ${JUMP_AREA_NET}: null
    stdin_open: true
    tty: true
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${OPT_SSH_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${PROXY_ETC_NGINX_VOLUME}
        target: /opt/${PROXY_ID}${ETC_NGINX_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${PROXY_OPT_SCRIPTS_VOLUME}
        target: /opt/${PROXY_ID}${OPT_SCRIPTS_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${PROXY_VAR_LOG_NGINX_VOLUME}
        target: /opt/${PROXY_ID}${VAR_LOG_NGINX_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${COLLECTOR_ETC_CRONTABS_VOLUME}
        target: /opt/${COLLECTOR_ID}${CRONTABS_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${COLLECTOR_OPT_DATA_VOLUME}
        target: /opt/${COLLECTOR_ID}${DATA_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${COLLECTOR_OPT_SCRIPTS_VOLUME}
        target: /opt/${COLLECTOR_ID}${OPT_SCRIPTS_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${COLLECTOR_VAR_LOG_VOLUME}
        target: /opt/${COLLECTOR_ID}${VAR_LOG_PATH}
        read_only: true
        volume: {}
  ${PROXY_SERVICE}:
    build:
      context: ${CWD_PATH}/${PROXY_ID}
      dockerfile: Dockerfile
      args:
        ${API_PFX}_PING: "\"${TRUE}\""
        ${API_PFX}BUILD: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_CREATE: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_ARCHIVE: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_ATTACH: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_EXEC: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_JSON: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_LOGS: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_START: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_STOP: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_ID_WAIT: "\"${TRUE}\""
        ${API_PFX}CONTAINERS_JSON: "\"${TRUE}\""
        ${API_PFX}IMAGES_CREATE: "\"${TRUE}\""
        ${API_PFX}IMAGES_JSON: "\"${TRUE}\""
        ${API_PFX}IMAGES_NAME: "\"${TRUE}\""
        ${API_PFX}NETWORKS: "\"${TRUE}\""
        ${API_PFX}VERSION: "\"${TRUE}\""
        ${API_PFX}VOLUMES: "\"${TRUE}\""
        API_PFX: ${API_PFX}
        API_TAG: "\"${API_TAG}\""
        API_URL: ${API_URL}
        COLLECTOR_IP: ${COLLECTOR_IP}
        CONTROLLER_IP: ${CONTROLLER_IP}
        ENTRYPOINTD_PATH: ${ENTRYPOINTD_PATH}
        ETC_NGINX_PATH: ${ETC_NGINX_PATH}
        HTTP_PROXY: ${http_proxy:-${HTTP_PROXY:-null}}
        HTTPS_PROXY: ${https_proxy:-${HTTPS_PROXY:-null}}
        NGINX_DEFAULT_CONF_PATH: ${NGINX_DEFAULT_CONF_PATH}
        OPT_SCRIPTS_PATH: ${OPT_SCRIPTS_PATH}
        PROXY_COMPONENT_IMG: ${PROXY_COMPONENT_IMG}
        PROXY_PORT: "\"${PROXY_PORT}\""
        SOCKET_PATH: ${SOCKET_PATH}
    container_name: ${PROXY_HOST}
    hostname: ${PROXY_HOST}
    image: ${PROXY_IMG}
    networks:
      ${PROXIFIED_SOCKET_NET}:
        ipv4_address: ${PROXY_IP}
    read_only: true
    tmpfs:
      - /run
      - /tmp
    volumes:
      - type: bind
        source: ${SOCKET_PATH}
        target: ${SOCKET_PATH}
        read_only: true
        bind:
          create_host_path: true
      - type: volume
        source: ${PROXY_ETC_NGINX_VOLUME}
        target: ${ETC_NGINX_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${PROXY_OPT_SCRIPTS_VOLUME}
        target: ${OPT_SCRIPTS_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${PROXY_VAR_LOG_NGINX_VOLUME}
        target: ${VAR_LOG_NGINX_PATH}
        volume: {}
  ${SAFEDEPOSIT_SERVICE}:
    container_name: ${SAFEDEPOSIT_HOST}
    hostname: ${SAFEDEPOSIT_HOST}
    image: ${PASS_COMPONENT_IMG}
    networks:
      ${JUMP_AREA_NET}: null
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${SSH_ROOT_PATH}
        read_only: true
        volume: {}
      - type: volume
        source: ${SAFEDEPOSIT_VOLUME}
        target: ${SAFEDEPOSIT_PATH}
        volume: {}
  ${SCHOLAR_SERVICE}:
    container_name: ${SCHOLAR_HOST}
    hostname: ${SCHOLAR_HOST}
    image: ${MAN_COMPONENT_IMG}
    networks:
      ${JUMP_AREA_NET}: null
    volumes:
      - type: volume
        source: ${SSH_VOLUME}
        target: ${SSH_ROOT_PATH}
        read_only: true
        volume: {}
networks:
  ${BUILDER_NET}:
    name: ${BUILDER_NET}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${BUILDER_SUB}
          gateway: ${BUILDER_GATEWAY_IP}
          ip_range: ${BUILDER_SUB}
  ${JUMP_AREA_NET}:
    name: ${JUMP_AREA_NET}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${JUMP_AREA_SUB}
          gateway: ${JUMP_AREA_GATEWAY_IP}
          ip_range: ${JUMP_AREA_SUB}
  ${PROXIFIED_SOCKET_NET}:
    name: ${PROXIFIED_SOCKET_NET}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${PROXIFIED_SOCKET_SUB}
          gateway: ${PROXIFIED_SOCKET_GATEWAY_IP}
          ip_range: ${PROXIFIED_SOCKET_SUB}
volumes:
  ${COLLECTOR_ETC_CRONTABS_VOLUME}:
    name: ${COLLECTOR_ETC_CRONTABS_VOLUME}
  ${COLLECTOR_OPT_DATA_VOLUME}:
    name: ${COLLECTOR_OPT_DATA_VOLUME}
  ${COLLECTOR_OPT_SCRIPTS_VOLUME}:
    name: ${COLLECTOR_OPT_SCRIPTS_VOLUME}
  ${COLLECTOR_VAR_LOG_VOLUME}:
    name: ${COLLECTOR_VAR_LOG_VOLUME}
  ${MYWHALEFLEET_VOLUME}:
    name: ${MYWHALEFLEET_VOLUME}
  ${PROXY_ETC_NGINX_VOLUME}:
    name: ${PROXY_ETC_NGINX_VOLUME}
  ${PROXY_OPT_SCRIPTS_VOLUME}:
    name: ${PROXY_OPT_SCRIPTS_VOLUME}
  ${PROXY_VAR_LOG_NGINX_VOLUME}:
    name: ${PROXY_VAR_LOG_NGINX_VOLUME}
  ${SAFEDEPOSIT_VOLUME}:
    name: ${SAFEDEPOSIT_VOLUME}
  ${SSH_VOLUME}:
    name: ${SSH_VOLUME}
  ${SPACEPORN_VOLUME}:
    name: ${SPACEPORN_VOLUME}
